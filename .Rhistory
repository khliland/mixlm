mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x+x:z, data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
eformula
!is.null(eformula$interactions)
all(unlist(lapply(mf[eformula$variables], inherits, what="factor")))
i <- 1
interaction(mf[strsplit(eformula$interactions[i],":")[[1]]])
# Expand mf
for(i in 1:length(eformula$interactions)){
mf[ncol(mf)+1] <- interaction(mf[strsplit(eformula$interactions[i],":")[[1]]])
}
colnames(mf)[(ncol(mf)-length(eformula$interactions)+1):ncol(mf)] <- eformula$interactions
mf
# Adapt formula
for(i in 1:length(eformula$interactions)){
formula <- formula(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)))
}
formula
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
i <- 1
formula(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)))
as.character(formula)
formula
gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula))
paste(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)), collapse=" ")
paste(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula))[c(2,1,3)], collapse=" ")
?stats:::as.character.formula
formula(paste(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula))[c(2,1,3)], collapse=" "))
#        formula <- formula(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)))
formula <- formula(paste(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula))[c(2,1,3)], collapse=" "))
mt <- terms(formula)
mt
i
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
contrasts <- contrasts[setdiff(names(contrasts), eformula$missing)]
contrasts
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
Anova(mixlm, type="II")
stats:::model.frame.lm
model.matrix(mixlm <- lm(y~x+z+x:z, data = dataset, equal_baseline=TRUE))
model.matrix(mixlm <- lm(y~x+z+x:z, data = dataset, equal_baseline=TRUE))
eformula$interactions
model.matrix(mixlm <- lm(y~x+z+x:z, data = dataset, equal_baseline=TRUE))
model.matrix(mixlm <- lm(y~x+z+x:z, data = dataset, equal_baseline=TRUE))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
anova(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
crossprod(model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE)))
anova(lm(y ~ x + x:z), data = dataset))
anova(lm(y ~ x + x:z, data = dataset))
anova(lm(y ~ x + x:z, data = dataset, equal_baseline=TRUE))
?lm
Anova(lm(y ~ x + x:z, data = dataset, equal_baseline=TRUE), type="II")
Anova(lm(y ~ x + x:z, data = dataset, equal_baseline=TRUE), type="III")
data(candies, package = "HDANOVA")
candies$assessment1 <- candies$assessment[,5]
anova(lm(assessment1 ~ candy + assessor:candy, data=candies, equal_baseline=TRUE))
anova(lm(assessment1 ~ candy + candy:assessor, data=candies, equal_baseline=TRUE))
anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE),type="II")
gsub(":","x","a:b")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE),type="II")
lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE)
lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE)
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
mt
mf
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
mt
mf
contrasts.names
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
contrasts.names
contrasts
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
contrasts.names
names(contrasts)[length(contrasts)]
contrasts.names[[gsub(":","x",eformula$interactions[[i]])]]
contrasts.names[[gsub(":","x",eformula$interactions[[i]])]] <- contrasts.names[[strsplit(eformula$interactions[[i]],":")[[1]]]]]
contrasts.names[[gsub(":","x",eformula$interactions[[i]])]] <- contrasts.names[[strsplit(eformula$interactions[[i]],":")[[1]]]]
contrasts.names[[strsplit(eformula$interactions[[i]],":")[[1]]]]
strsplit(eformula$interactions[[i]],":")
strsplit(eformula$interactions[[i]],":")
strsplit(eformula$interactions[[i]],":")[[1]]
strsplit(eformula$interactions[[i]],":")[[1]][1]
contrasts.names[[gsub(":","x",eformula$interactions[[i]])]] <- contrasts.names[[strsplit(eformula$interactions[[i]],":")[[1]][1]]]
contrasts.names
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
contrasts.names
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
Aanova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="II")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="II")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
model.matrix(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
model.matrix(lm(assessment1 ~ assessor + candy + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
model.matrix(lm(assessment1 ~ assessor + candy + assessor:candy, data=candies))
mmx <- model.matrix(lm(assessment1 ~ assessor + candy + assessor:candy, data=candies))
mm <- model.matrix(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
mmx[,51]
mm[,55]
mm[,51]
mmx[,55]
colnames(mm)
colnames(mmx)
mm[,12:51]
rowSums(mm[,12:51])
rowSums(mmx[,16:55])
mixlm:::.krons(contr.sum(5),contr.sum(11))
mixlm:::.krons(list(contr.sum(5),contr.sum(11)))
rowSums(mixlm:::.krons(list(contr.sum(5),contr.sum(11))))
rowSums(mixlm:::.krons(list(contr.sum(11),contr.sum(5))))
extended.model.frame(mod <- asca(assessment1 ~ assessor*candy, data=candies))
extended.model.frame(mod <- asca(assessment1 ~ assessor*candy, data=candies))
extended.model.frame(assessment1 ~ assessor*candy, data=candies)
model.matrix(extended.model.frame(assessment1 ~ assessor*candy, data=candies))
model.matrix(lm(assessment1 ~ assessor*candy, data=candies))
anova(lm(assessment1 ~ assessor*candy, data=candies))
Anova(lm(assessment1 ~ assessor*candy, data=candies), type="II")
lm(assessment1 ~ assessor*candy, data=candies)$coefs
coefficients(lm(assessment1 ~ assessor*candy, data=candies))
model.matrix(lm(assessment1 ~ assessor*candy, data=candies))
model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(11:14)]
colnames(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(11:14)])
colnames(model.matrix(lm(assessment1 ~ assessor*candy, data=candies)))
colnames(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)])
solve(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)], candies$assessment1)
solve(crossprod(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)]), candies$assessment1)
solve(tcrossprod(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)]), candies$assessment1)
dutt <- data.frame(M = I(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)]), candies$assessment1)
dutt <- data.frame(M = I(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)]), ass = candies$assessment1)
lm(ass~M, data=dutt)
anova(lm(ass~M, data=dutt))
dutt <- data.frame(M1 = I(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,2:11]), M2 = I(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(1:15)]), ass = candies$assessment1)
anova(lm(ass~M1+M2, data=dutt))
anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
Anova(lm(ass~M1+M2, data=dutt), type="II")
Anova(lm(ass~M1+M2, data=dutt), type="III")
head(dutt)
anova(lm(assessment1 ~ assessor*candy, data=candies))
Anova(lm(assessment1 ~ assessor*candy, data=candies), type="II")
Anova(lm(ass~M1+M2, data=dutt), type="III")
anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="II")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
?lm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y ~ x*r(z), data = dataset)
mixlm <- lm(y ~ x*r(z), data = dataset, REML=TRUE)
summary(mixlm)
mixlm <- lm(y ~ x*r(z), data = dataset, REML=TRUE, contrasts="contr.sum")
?traceback()
?warnings
warnings()
mixlm <- lm(y ~ x*r(z), data = dataset, REML=TRUE, contrasts="contr.sum")
mixlm <- lm(y ~ x*r(z), data = dataset, REML=TRUE, contrasts="contr.sum")
devtools::load_all(".")
mixlm <- lm(y ~ x*r(z), data = dataset, REML=TRUE, contrasts="contr.sum")
contrasts
rw$fixed
contrasts[rw$fixed]
mixlm <- lm(y ~ x*r(z), data = dataset, REML=TRUE, contrasts="contr.sum")
mixlm
mixlm <- lm(y ~ x*r(z), data = dataset, contrasts="contr.sum")
mixlm
mixlm <- lm(y ~ x*r(z), data = dataset)
mixlm
mixlm <- lm(y ~ x*r(z), data = dataset, REML=TRUE)
mixlm
devtools::check()
# Plot the connection between number of samples and the correlation needed
# to achieve significance on a 0.05 level.
# The correlation is calculated using the formula for the t-test.
# The number of samples is calculated using the formula for the t-test.
# The plot is created using ggplot2.
library(ggplot2)
# Create a data frame with the number of samples and the correlation needed
# to achieve significance on a 0.05 level.
df <- data.frame(
samples = seq(10, 1000, by = 10),
correlation = 2 * qt(0.025, df = seq(10, 1000, by = 10) - 2) / sqrt(seq(10, 1000, by = 10))
)
# Create the plot
ggplot(df, aes(x = samples, y = correlation)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(
title = "Number of samples vs. correlation needed to achieve significance",
x = "Number of samples",
y = "Correlation needed"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
cor.test
stats:::cor.test.default
# r <- cor(x, y)
n <- 100
r <- seq(-1, 1, length = 100)
# r <- cor(x, y)
n <- 100
r <- seq(-1, 1, length = 11)
alternative <- "two.sided"
df <- n - 2L
ESTIMATE <- c(cor = r)
PARAMETER <- c(df = df)
STATISTIC <- c(t = sqrt(df) * r/sqrt(1 - r^2))
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * min(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
pt(STATISTIC, df)
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * pmin(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
PVAL
# r <- cor(x, y)
n <- 100
r <- seq(0, 1, length = 101)
alternative <- "two.sided"
df <- n - 2L
ESTIMATE <- c(cor = r)
PARAMETER <- c(df = df)
STATISTIC <- c(t = sqrt(df) * r/sqrt(1 - r^2))
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * pmin(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
plot(PVAL)
plot(PVAL, type="l")
plot(r,PVAL, type="l")
# r <- cor(x, y)
N <- c(10, 20, 50, 100, 200)
Nr <- 101
pvals <- matrix(0, nrow = length(N), ncol = Nr)
for(n in 1:length(N)){
n <- N[i]
r <- seq(0, 1, length = Nr)
alternative <- "two.sided"
df <- n - 2L
ESTIMATE <- c(cor = r)
PARAMETER <- c(df = df)
STATISTIC <- c(t = sqrt(df) * r/sqrt(1 - r^2))
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * pmin(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
pvals[i,] <- PVAL
}
for(i in 1:length(N)){
n <- N[i]
r <- seq(0, 1, length = Nr)
alternative <- "two.sided"
df <- n - 2L
ESTIMATE <- c(cor = r)
PARAMETER <- c(df = df)
STATISTIC <- c(t = sqrt(df) * r/sqrt(1 - r^2))
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * pmin(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
pvals[i,] <- PVAL
}
matplot(r, pvals, type = "l", lty = 1, lwd = 2, col = 1:length(N), xlab = "r",
ylab = "p-value", main = "p-value vs. r", ylim = c(0, 1))
matplot(r, t(pvals), type = "l", lty = 1, lwd = 2, col = 1:length(N), xlab = "r",
ylab = "p-value", main = "p-value vs. r", ylim = c(0, 1))
legend("topright", legend = N, col = 1:length(N), lty = 1, lwd = 2)
abline(h = 0.05, lty = 2, col = "red")
matplot(r, t(pvals), type = "l", lty = 1, lwd = 2, col = 1:length(N), xlab = "Spearman r",
ylab = "p-value", main = "p-value vs. r", ylim = c(0, 1))
legend("topright", legend = N, col = 1:length(N), lty = 1, lwd = 2)
abline(h = 0.05, lty = 2, col = "red")
abline(v = 0.6, lty = 2, col = "blue")
abline(h = 0.025, lty = 2, col = "black")
# r <- cor(x, y)
N <- c(10, 27, 50, 100, 200)
Nr <- 101
r <- seq(0, 1, length = Nr)
pvals <- matrix(0, nrow = length(N), ncol = Nr)
for(i in 1:length(N)){
n <- N[i]
alternative <- "two.sided"
df <- n - 2L
ESTIMATE <- c(cor = r)
PARAMETER <- c(df = df)
STATISTIC <- c(t = sqrt(df) * r/sqrt(1 - r^2))
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * pmin(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
pvals[i,] <- PVAL
}
matplot(r, t(pvals), type = "l", lty = 1, lwd = 2, col = 1:length(N), xlab = "Spearman r",
ylab = "p-value", main = "p-value vs. r", ylim = c(0, 1))
legend("topright", legend = N, col = 1:length(N), lty = 1, lwd = 2)
abline(h = 0.05, lty = 2, col = "red")
abline(h = 0.025, lty = 2, col = "black")
abline(v = 0.6, lty = 2, col = "blue")
rownames(pvals) <- N
View(pvals)
pvals[2,]
which((pvals[2,]-0.05)^2)
which.min((pvals[2,]-0.05)^2)
pvals[2,which.min((pvals[2,]-0.05)^2)]
r[2,which.min((pvals[2,]-0.05)^2)]
r[which.min((pvals[2,]-0.05)^2)]
r[which.min((pvals[2,]-0.05)^2)]
r[which.min((pvals[2,]-0.01)^2)]
r[which.min((pvals[2,]-0.05)^2)]
r[which.min((pvals[2,]-0.01)^2)]
# r <- cor(x, y)
N <- c(10, 27, 50, 100, 200)
Nr <- 1001
r <- seq(0, 1, length = Nr)
pvals <- matrix(0, nrow = length(N), ncol = Nr)
rownames(pvals) <- N
for(i in 1:length(N)){
n <- N[i]
alternative <- "two.sided"
df <- n - 2L
ESTIMATE <- c(cor = r)
PARAMETER <- c(df = df)
STATISTIC <- c(t = sqrt(df) * r/sqrt(1 - r^2))
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * pmin(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
pvals[i,] <- PVAL
}
matplot(r, t(pvals), type = "l", lty = 1, lwd = 2, col = 1:length(N), xlab = "Spearman r",
ylab = "p-value", main = "p-value vs. r", ylim = c(0, 1))
legend("topright", legend = N, col = 1:length(N), lty = 1, lwd = 2)
abline(h = 0.05, lty = 2, col = "red")
abline(h = 0.025, lty = 2, col = "black")
abline(v = 0.6, lty = 2, col = "blue")
r[which.min((pvals[2,]-0.05)^2)]
r[which.min((pvals[2,]-0.01)^2)]
# r <- cor(x, y)
N <- c(10, 27, 50, 100, 200)
Nr <- 2001
r <- seq(-1, 1, length = Nr)
pvals <- matrix(0, nrow = length(N), ncol = Nr)
rownames(pvals) <- N
for(i in 1:length(N)){
n <- N[i]
alternative <- "two.sided"
df <- n - 2L
ESTIMATE <- c(cor = r)
PARAMETER <- c(df = df)
STATISTIC <- c(t = sqrt(df) * r/sqrt(1 - r^2))
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * pmin(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
pvals[i,] <- PVAL
}
matplot(r, t(pvals), type = "l", lty = 1, lwd = 2, col = 1:length(N), xlab = "Spearman r",
ylab = "p-value", main = "p-value vs. r", ylim = c(0, 1))
legend("topright", legend = N, col = 1:length(N), lty = 1, lwd = 2)
abline(h = 0.05, lty = 2, col = "red")
abline(h = 0.025, lty = 2, col = "black")
abline(v = 0.6, lty = 2, col = "blue")
r[which.min((pvals[2,]-0.05)^2)]
r[which.min((pvals[2,]-0.01)^2)]
# r <- cor(x, y)
N <- c(10, 27, 50, 100, 200)
Nr <- 2001
r <- seq(0, 1, length = Nr)
pvals <- matrix(0, nrow = length(N), ncol = Nr)
rownames(pvals) <- N
for(i in 1:length(N)){
n <- N[i]
alternative <- "greater"
df <- n - 2L
ESTIMATE <- c(cor = r)
PARAMETER <- c(df = df)
STATISTIC <- c(t = sqrt(df) * r/sqrt(1 - r^2))
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * pmin(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
pvals[i,] <- PVAL
}
matplot(r, t(pvals), type = "l", lty = 1, lwd = 2, col = 1:length(N), xlab = "Spearman r",
ylab = "p-value", main = "p-value vs. r", ylim = c(0, 1))
legend("topright", legend = N, col = 1:length(N), lty = 1, lwd = 2)
abline(h = 0.05, lty = 2, col = "red")
abline(h = 0.025, lty = 2, col = "black")
abline(v = 0.6, lty = 2, col = "blue")
r[which.min((pvals[2,]-0.05)^2)]
r[which.min((pvals[2,]-0.01)^2)]
# r <- cor(x, y)
N <- c(10, 27, 50, 100, 200)
Nr <- 2001
r <- seq(0, 1, length = Nr)
pvals <- matrix(0, nrow = length(N), ncol = Nr)
rownames(pvals) <- N
for(i in 1:length(N)){
n <- N[i]
alternative <- "two.sided"
df <- n - 2L
ESTIMATE <- c(cor = r)
PARAMETER <- c(df = df)
STATISTIC <- c(t = sqrt(df) * r/sqrt(1 - r^2))
PVAL <- switch(alternative, less = pt(STATISTIC, df),
greater = pt(STATISTIC, df, lower.tail = FALSE),
two.sided = 2 * pmin(pt(STATISTIC, df), pt(STATISTIC,
df, lower.tail = FALSE)))
pvals[i,] <- PVAL
}
matplot(r, t(pvals), type = "l", lty = 1, lwd = 2, col = 1:length(N), xlab = "Spearman r",
ylab = "p-value", main = "p-value vs. r", ylim = c(0, 1))
legend("topright", legend = N, col = 1:length(N), lty = 1, lwd = 2)
abline(h = 0.05, lty = 2, col = "red")
abline(h = 0.025, lty = 2, col = "black")
abline(v = 0.6, lty = 2, col = "blue")
r[which.min((pvals[2,]-0.05)^2)]
r[which.min((pvals[2,]-0.01)^2)]
?rcorr
??rcorr
x <- c(-2, -1, 0, 1, 2)
y <- c(4,   1, 0, 1, 4)
z <- c(1,   2, 3, 4, NA)
v <- c(1,   2, 3, 4, 5)
rcorr(cbind(x,y,z,v))
library(Hmisc)
x <- c(-2, -1, 0, 1, 2)
y <- c(4,   1, 0, 1, 4)
z <- c(1,   2, 3, 4, NA)
v <- c(1,   2, 3, 4, 5)
rcorr(cbind(x,y,z,v))
# Create two vectors of 27 random numbers that have a correlation of 0.381
set.seed(123)
x <- rnorm(27)
y <- 0.381 * x + sqrt(1 - 0.381^2) * rnorm(27)
cor(x, y)
sqrt(0.381)
y <- 0.281 * x + sqrt(1 - 0.281^2) * rnorm(27)
cor(x, y)
y <- 0.581 * x + sqrt(1 - 0.581^2) * rnorm(27)
cor(x, y)
x <- rnorm(27)
y <- 0.281 * x + sqrt(1 - 0.281^2) * rnorm(27)
cor(x, y)
x <- rnorm(27)
y <- 0.281 * x + sqrt(1 - 0.281^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.281 * x + sqrt(1 - 0.281^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.281 * x + sqrt(1 - 0.281^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.281 * x + sqrt(1 - 0.281^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.291 * x + sqrt(1 - 0.291^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.31 * x + sqrt(1 - 0.31^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.32 * x + sqrt(1 - 0.32^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.33 * x + sqrt(1 - 0.33^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.34 * x + sqrt(1 - 0.34^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.345 * x + sqrt(1 - 0.345^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.344 * x + sqrt(1 - 0.344^2) * rnorm(27)
cor(x, y)
set.seed(123)
x <- rnorm(27)
y <- 0.343 * x + sqrt(1 - 0.343^2) * rnorm(27)
cor(x, y)
rcorr(cbind(x,y))

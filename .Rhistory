mod
mod[]
unique(mod$effect.sources)
spli
for(i in 1:length(ueff)){
if(sum(spli %in% (splii <- unlist(strsplit(ueff[i],':')))) == length(spli) &&
length(diffs <- setdiff(splii,spli))>0){
form <- paste(form, "-", ueff[i], "+", paste(prox,diffs,sep=':'))
}
}
ueff <- unique(mod$effect.sources)
for(i in 1:length(ueff)){
if(sum(spli %in% (splii <- unlist(strsplit(ueff[i],':')))) == length(spli) &&
length(diffs <- setdiff(splii,spli))>0){
form <- paste(form, "-", ueff[i], "+", paste(prox,diffs,sep=':'))
}
}
form
update(mod, update(formula(mod),form), data=data)
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + D + C%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
mydata <- data.frame(y = rnorm(12),
x = factor(c(rep(2,4),rep(1,4),rep(0,4))),
z = factor(rep(c(1,0),6)))
mixlm <- lm(y~x*r(z),
data = mydata)
Anova(mixlm,type="III")
library(mixlm)
mydata <- data.frame(y = rnorm(12),
x = factor(c(rep(2,4),rep(1,4),rep(0,4))),
z = factor(rep(c(1,0),6)))
mixlm <- lm(y~x*r(z),
data = mydata)
Anova(mixlm,type="III")
simple.glht(mixlm, "x")
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
multcomp:::mcp
multcomp:::glht
multcomp:::glht.mcp
multcomp:::print.confint.glht
multcomp:::glht
multcomp:::glht.mcp
multcomp:::mcp2matrix2
mydata <- data.frame(y = rnorm(12),
x = factor(c(rep(2,4),rep(1,4),rep(0,4))),
z = factor(rep(c(1,0),6)))
mixlm <- lm(y~x*z,
data = mydata)
Anova(mixlm,type="III")
simple.glht(mixlm, "x")
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
multcomp:::glht.matrix
vcov(mixlm)
3.0683 /2.3432
sqrt(2)
3.0683 /sqrt(2)
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
summary(multcomp::glht(mixlm, "x")
)
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Fisher")))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
summary(multcomp::glht(mixlm, linfct = c("1 - 0 = 0", "2 - 0 = 0", "2 - 1 = 0")))
summary(multcomp::glht(mixlm, linfct = c("'1' - '0' = 0", "'2' - '0' = 0", "'2' - '1' = 0")))
summary(multcomp::glht(mixlm, linfct = mcp(x = c("'1' - '0' = 0", "'2' - '0' = 0", "'2' - '1' = 0"))))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = c("'1' - '0' = 0", "'2' - '0' = 0", "'2' - '1' = 0"))))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = c("1 - 0 = 0", "2 - 0 = 0", "2 - 1 = 0"))))
contr <- rbind("1 - 0" = c(-1, 1 0),"2 - 0" = c(-1,0,1),"2 - 1" = c(0,-1,1))
contr <- rbind("1 - 0" = c(-1, 1, 0), "2 - 0" = c(-1,0,1), "2 - 1" = c(0,-1,1))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr))
)
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr)))
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
contr <- rbind("1 - 0" = c(-1, 1, 0))
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr)))
contr <- rbind("1 - 0" = c(-1, 1, 0), "2 - 0" = c(-1,0,1), "2 - 1" = c(0,-1,1))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr)))
contr <- rbind("1 - 0" = c(-1, 1, 0))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr)))
2*(1-tp(abs(2.246),2))
2*(1-qt(abs(2.246),2))
2*(1-qt(abs(2.246),1000))
2*(1-pt(abs(2.246),1000))
1-qtukey(sqrt(2)*2.246,1000,3)
1-qtukey(sqrt(2)*2.246,3,1000)
1-qtukey(sqrt(2)*2.246,3,100)
1-qtukey(sqrt(2)*2.246,3,10)
1-ptukey(sqrt(2)*2.246,3,10)
1-ptukey(sqrt(2)*2.246,3,10000)
1-ptukey(sqrt(2)*2.246,3,10000, lower.tail=FALSE)
ptukey(sqrt(2)*2.246,3,10000, lower.tail=FALSE)
qtukey(0.95,3,10000)
qtukey(0.95,3,10000)/sqrt(2)
(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"))[])
multcomp::modelparm(mixlm)
mixx <- mixlm
class(mixx) <- "lm"
multcomp::modelparm(mixlm)
multcomp::modelparm(mixx)
(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=3))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=3))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=2))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=1))
simple.glht(mixlm, "x")
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=5))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=6))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=7))
?simple.glht
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=Inf))
library(mixlm)
simple.glht(mixlm, "x")
simple.glht(mixlm, "x", df=Inf)
simple.glht(mixlm, "x", df=100)
simple.glht(mixlm, "x", df=1000)
qtukey(0.05,2,2)/sqrt(2)
qtukey(0.05,2,20)/sqrt(2)
qtukey(0.05,2,2000)/sqrt(2)
pqtukey(0.05,2,2000)/sqrt(2)
ptukey(0.05,2,2000)/sqrt(2)
ptukey(0.05,2,2)/sqrt(2)
library(mixlm)
simple.glht(mixlm, "x", df=1000)
simple.glht(mixlm, "x", df=Inf)
Tab <- read.csv("~/NMBU/Tove Kristina Sundgren/15GHRHIZO aerenchyma semc.csv")
Tab <- read.csv2("~/NMBU/Tove Kristina Sundgren/15GHRHIZO aerenchyma semc.csv")
View(Tab)
lmd4 <- lm(Cortex ~ Sort + Location
+ Location:Sort
+r(Rep)+r(Lengdegrupp)%in%Location%in%Sort,
data=acs)
lmd4 <- lm(Cortex ~ Sort + Location
+ Location:Sort
+r(Rep)+r(Lengdegrupp)%in%Location%in%Sort,
data=Tab)
View(Tab)
Tab <- within(Tab, {Lengdegrupp <- factor(Lengdegrupp)
Rep <- factor(Rep)})
lmd4 <- lm(Cortex ~ Sort + Location
+ Location:Sort
+r(Rep)+r(Lengdegrupp)%in%Location%in%Sort,
data=Tab)
Anova(lmd4)
Anova(lmd4, type =2)
Anova(lmd4, type =3)
simple.glht(lmd4, "sort")
simple.glht(lmd4, "Sort")
simple.glht(lmd4, "Sort", df=Inf)
anova(lmd4)
simple.glht(lmd4, "Location")
cld(simple.glht(lmd4, "Location"))
mixlm <- lm(y~x*r(z), data = mydata)
simple.glht(mixlm, "x")
simple.glht(mixlm, "x", df=Inf)
library(htmlwidgets)
multcomp:::cld
multcomp:::cld.summary.glht
multcomp:::insert_absorb()
multcomp:::insert_absorb
multcomp:::cld.confint.glht
library(mixlm)
amod <- aov(breaks ~ tension, data = warpbreaks)
### specify all pair-wise comparisons among levels of variable "tension"
tuk <- glht(amod, linfct = mcp(tension = "Tukey"))
library(multcomp)
amod <- aov(breaks ~ tension, data = warpbreaks)
### specify all pair-wise comparisons among levels of variable "tension"
tuk <- glht(amod, linfct = mcp(tension = "Tukey"))
confint(tuk)
cld(confint(tuk))
confint(tuk)
confint(tuk)[]
amod
summary(amod)
levels(warpbreaks$tension)
library(mixlm)
?simple.glht
summary(fm1 <- lm(breaks ~ wool + tension, data = warpbreaks))
simple.glht(fm1, "tension")
plot(simple.glht(fm1, "tension"))
cld(simple.glht(fm1, "tension"))
library(pls)
?plsr
data(yarn)
## Default methods:
yarn.pcr <- pcr(density ~ NIR, 6, data = yarn, validation = "CV")
yarn.pls <- plsr(density ~ NIR, 6, data = yarn, validation = "CV")
yarn.pls$validation$pred
dim(yarn.pls$validation$pred)
dim(yarn.pls$validation$pred[,1,])
library(Rcmdr)
modelsP()
modelsP(2)
modelsP(1)
modelsP(3)
modelCapability('compm')
?modelCapability
modelCapabilities
Rcmdr:::modelCapabilities
Rcmdr:::modelCapabilities
Rcmdr::modelCapabilities
library(RcmdrPlugin.NMBU)
library(mixlm)
library(olsrr)
install.packages("olsrr")
library(olsrr)
ols_plot_resid_fit?
?ols_plot_resid_fit
model <- lm(mpg ~ disp + hp + wt, data = mtcars)
ols_plot_resid_fit(model)
lm
class(lm)
class(model)
ols_plot_resid_fit
check_model(model)
olsrr:::check_model(model)
olsrr:::check_model
lmm
UseMethod(lmm)
UseMethod('lmm')
methods('lmm')
summary.lmm
class(model) <- "lm"
ols_plot_added_variable(model)
?mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
class(mixlm)
class(mixlm) <- "lm"
ols_plot_added_variable(mixlm)
simple.glht(mixlm,"x:z")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
simple.glht(mixlm,"x:z")
simple.glht(mixlm,"x:z", corr="Tukey")
simple.glht(mixlm,"x:z", corr="Tukey", level=0.95)
mixlm::simple.glht(mixlm,"x:z", corr="Tukey", level=0.95)
??devtools
??check
??check
??checkCRAN
?checkCRAN
rhub::check(platform="debian")
rhub::platforms()
rhub::check(platform="debian-clang-devel")
devtools::check_win_devel()
rhub::check(platform="debian-clang-devel")
devtools::check_win_devel()
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
seed(1)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
set.seed(1)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
set.seed(42)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
rhub::check(platform="debian-gcc-devel")
rhub::check(platform="debian-gcc-devel")
?eval
library(mixlm)
?mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
class(mixlme)
class(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
a <- anova(mixlm)
a
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(dataset$y~dataset$x*dataset$z)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(dataset$y~dataset$x*dataset$z)
Anova(mixlm,type="II")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(dataset$y~dataset$x*dataset$z)
anova(mixlm)
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
car::Anova()
car::Anova.lm()
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
stats::anova
car::Anova
Anova
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(dataset$y~dataset$x*dataset$z)
anova(mixlm)
Anova(mixlm)
library(mixlm)
Anova(mixlm)
summary(mixlm)
Anova(mixlm, type="III")
?readBin
setwd("C:/Users/kristl/OneDrive - Norwegian University of Life Sciences/Artikler/Avsluttet/MALDI-TOF/data")
## Things to add: ##$ACQMETH, ##$AXMeth (they contain <text>)
readMaldi <- function(path, acqu = 1) {
acqulines <- readLines(file.path(path, acqu, "1SLin", "acqu"))
## Name of the parametres we want to extract:
params <- c("ML1", "ML2", "ML3", "ML1_raw", "ML2_raw", "ML3_raw",
"DW", "DELAY", "TD", "PIEDLY", "NoSHOTS", "ATTEN",
"BYTORDA")
## Extract the matching lines:
pattern <- paste("^##\\$?(", paste(params, collapse = "|"),
")=", sep = "")
matches <- sub("^##\\$?", "", grep(pattern, acqulines, value = TRUE))
## Create a named list of attributes:
attrs <-
eval(parse(text = paste("list(", paste(matches, collapse = ","), ")")))
## Read the spectral values:
spec <- readBin(file.path(path, acqu, "1SLin", "fid"), what = "int",
n = attrs$TD + 1,
endian = ifelse(attrs$BYTORDA, "big", "little"))
## Check length:
if (length(spec) != attrs$TD)
stop("Length of spectrum does not match the `TD' parameter.")
## Remove unwanted attributes:
attrs$BYTORDA <- NULL
attributes(spec) <- attrs
spec
}
mzvals <- function(x, DELAY = attr(x, "DELAY"), DW = attr(x, "DW"),
c0 = attr(x, "ML2"), c1 = attr(x, "ML1"),
c2 = attr(x, "ML3"), start.at.one = TRUE) {
if (is.null(attr(x, "TD"))) {
## x is not a spectrum.  Check that no parametres are missing:
if (any(c(missing(DELAY), missing(DW), missing(c0), missing(c1),
missing(c2))))
stop("DELAY, DW, c0, c1 or c2 missing.")
ind <- if(isTRUE(start.at.one)) x - 1 else x
} else {
## Spectrum.  Make a 0, 1, ..., TD - 1 vector:
ind <- seq(from = 0, length.out = attr(x, "TD"))
}
tof <- DW * ind + DELAY - c0
k <- c1 / 2.5e11
k * (tof / (1 + sqrt(1 + c2 * k * tof)))^2
}
## Things to add: ##$ACQMETH, ##$AXMeth (they contain <text>)
readMaldi <- function(path, acqu = 1) {
acqulines <- readLines(file.path(path, acqu, "1SLin", "acqu"))
## Name of the parametres we want to extract:
params <- c("ML1", "ML2", "ML3", "ML1_raw", "ML2_raw", "ML3_raw",
"DW", "DELAY", "TD", "PIEDLY", "NoSHOTS", "ATTEN",
"BYTORDA")
## Extract the matching lines:
pattern <- paste("^##\\$?(", paste(params, collapse = "|"),
")=", sep = "")
matches <- sub("^##\\$?", "", grep(pattern, acqulines, value = TRUE))
## Create a named list of attributes:
attrs <-
eval(parse(text = paste("list(", paste(matches, collapse = ","), ")")))
## Read the spectral values:
spec <- readBin(file.path(path, acqu, "1SLin", "fid"), what = "int",
n = attrs$TD + 1,
endian = ifelse(attrs$BYTORDA, "big", "little"))
browser()
## Check length:
if (length(spec) != attrs$TD)
stop("Length of spectrum does not match the `TD' parameter.")
## Remove unwanted attributes:
attrs$BYTORDA <- NULL
attributes(spec) <- attrs
spec
}
### The milk samples (A1-A12, ..., J1-H12, K1-K10, ..., P1-P10):
spotRad <- c(rep(1:10, 12), rep(11:16, 10))
msdir <- "blanding_serie1"
### The milk samples (A1-A12, ..., J1-H12, K1-K10, ..., P1-P10):
spotRad <- c(rep(1:10, 12), rep(11:16, 10))
spotKol <- c(rep(1:12, each = 10), rep(1:10, each = 6))
spotIDs <- paste(LETTERS[spotRad], spotKol, sep = "")
## Check that all directories are there:
all.equal(sort(list.files(msdir)), sort(paste("0_", spotIDs, sep = "")))
## Read the files:
tmp <- list()
for (spot in spotIDs)
tmp[[spot]] <- readMaldi(paste(msdir, "/0_", spot, sep = ""))
msdir <- "Melk/2006-08-30/blanding_serie1"
tmp[[spot]] <- readMaldi(paste(msdir, "/0_", spot, sep = ""))
function(path, acqu = 1) {
acqulines <- readLines(file.path(path, acqu, "1SLin", "acqu"))
## Name of the parametres we want to extract:
params <- c("ML1", "ML2", "ML3", "ML1_raw", "ML2_raw", "ML3_raw",
"DW", "DELAY", "TD", "PIEDLY", "NoSHOTS", "ATTEN",
"BYTORDA")
## Extract the matching lines:
pattern <- paste("^##\\$?(", paste(params, collapse = "|"),
")=", sep = "")
matches <- sub("^##\\$?", "", grep(pattern, acqulines, value = TRUE))
## Create a named list of attributes:
attrs <-
eval(parse(text = paste("list(", paste(matches, collapse = ","), ")")))
## Read the spectral values:
spec <- readBin(file.path(path, acqu, "1SLin", "fid"), what = "int",
n = attrs$TD + 1,
endian = ifelse(attrs$BYTORDA, "big", "little"))
browser()
## Check length:
if (length(spec) != attrs$TD)
stop("Length of spectrum does not match the `TD' parameter.")
## Remove unwanted attributes:
attrs$BYTORDA <- NULL
attributes(spec) <- attrs
spec
}
file.path(path, acqu, "1SLin", "fid")
tail(spec)
library(mixlm)
?mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset, REML = TRUE)
mixlm
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y ~ (x*z*r(v))^2, data = dataset)
mixlm
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y ~ (x*z*r(v))^2, data = dataset, REML = TRUE)
mixlm
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y ~ (x+z+r(v))^2, data = dataset)
mixlm
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y ~ (x+z+r(v))^2, data = dataset, REML = TRUE)
mixlm

A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
mod1 <- update(mod, .~.+A_B-A*B-A:B:C+A_B:r(C), data = data)
mod1
TukeyMix(mod,prox,level)
Anova(mod,type=3)
TukeyMix(mod1,prox,level)
mod$random
fparse(mod)
fparse(formula(mod))
setdiff(fparse(formula(mod)), mod$random$main.rands.only.inter)
setdiff(fparse(formula(mod)), c(mod$random$main.rands.only.inter, mod$random$fixed))
formula(mod)
formula(mod)[[1]]
formula(mod)[[2]]
formula(mod)[[3]]
mod
mod[]
mod$random$all
strsplit(effect,":")
strsplit(effect,":")[[1]]
spli
for(i in 1:length(mod$random$all)){
if((sum(spli %in% unlist(strsplit(mod$random$all[i]))) == length(spli)){
print(i)
}
}
for(i in 1:length(mod$random$all)){
if(sum(spli %in% unlist(strsplit(mod$random$all[i]))) == length(spli)){
print(i)
}
}
i
spli %in% unlist(strsplit(mod$random$all[i]))
for(i in 1:length(mod$random$all)){
if(sum(spli %in% unlist(strsplit(mod$random$all[i],':'))) == length(spli)){
print(i)
}
}
i <- 4
sum(spli %in% (splii <- unlist(strsplit(mod$random$all[i],':')))) == length(spli)
splii
paste(form, "-", mod$random$all[i], "+", paste(prox,setdiff(splii,spli),sep=':'))
form <- ".~."
paste(form, "-", mod$random$all[i], "+", paste(prox,setdiff(splii,spli),sep=':'))
setdiff(splii,spli)
form <- paste(".~.-", pro, "+", prox)
for(i in 1:length(mod$random$all)){
if(sum(spli %in% (splii <- unlist(strsplit(mod$random$all[i],':')))) == length(spli) &&
length(diffs <- setdiff(splii,spli))>0){
form <- paste(form, "-", mod$random$all[i], "+", paste(prox,diffs,sep=':'))
}
}
form
update(mod,form)
update(mod,form, data=data)
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
object
class(mod)
form
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
form
rparse(mod)
rparse(formula(mod))
formula(mod)
mode()
mod
call(mod)
getCall(mod)
getCall(mod)[[1]]
getCall(mod)[[2]]
paste(getCall(mod)[[2]], "2")
getCall(mod)[[2]][[2]]
getCall(mod)[[2]][[1]]
getCall(mod)[[2]][[3]]
paste(getCall(mod)[[2]][[3]], "fisk")
as.character(getCall(mod)[[2]][[3]])
paste(getCall(mod)[[2]][[3]])
mod$random
update(mod,'.~.-D+r(D)')
?lm
formula("a~b+r(c)")
formula(formula("a~b+r(c)"))
mod$random$formula
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
mod$random$formula
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
mod$random$rformula
update(mod$random$rformula,
update(mod$random$rformula, '.~.-A*B'
update(mod$random$rformula, '.~.-A*B')
update(mod$random$rformula, '.~.-A*B-A:B:C')
source('H:/Documents/Subversion/SVN/mixlm/R/statistics.R', echo=TRUE)
source('H:/Documents/Subversion/SVN/mixlm/R/statistics.R', echo=TRUE)
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
source('H:/Documents/Subversion/SVN/mixlm/R/statistics.R', echo=TRUE)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
mod$random$rformula
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
mod$random
form <- paste(".~.-", pro, "+", prox)
for(i in 1:length(mod$random$allr)){
if(sum(spli %in% (splii <- unlist(strsplit(mod$random$allr[i],':')))) == length(spli) &&
length(diffs <- setdiff(splii,spli))>0){
form <- paste(form, "-", mod$random$allr[i], "+", paste(prox,diffs,sep=':'))
}
}
form
update(mod, form, data=data)
update(mod$random$rformula,form)
update(mod, update(mod$random$rformula,form), data=data)
mod
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'B:A')
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A')
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'B')
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B:C')
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + r(D) + r(C)%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + D + C%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + D + C%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + D + C%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
mod
mod[]
unique(mod$effect.sources)
spli
for(i in 1:length(ueff)){
if(sum(spli %in% (splii <- unlist(strsplit(ueff[i],':')))) == length(spli) &&
length(diffs <- setdiff(splii,spli))>0){
form <- paste(form, "-", ueff[i], "+", paste(prox,diffs,sep=':'))
}
}
ueff <- unique(mod$effect.sources)
for(i in 1:length(ueff)){
if(sum(spli %in% (splii <- unlist(strsplit(ueff[i],':')))) == length(spli) &&
length(diffs <- setdiff(splii,spli))>0){
form <- paste(form, "-", ueff[i], "+", paste(prox,diffs,sep=':'))
}
}
form
update(mod, update(formula(mod),form), data=data)
library(mixlm)
M <- data.frame(C = rep(c('A','B'),each=16),
B = rep(rep(c('A','B'), each=8),2),
A = rep(rep(c('A','B'), each=4),4),
D = rep(rep(c('A','B'), each=2),8),
E = rep(rep(c('A','B'), each=1),16,))
M$Y <- rnorm(32)
library(mixlm)
mod <- lm(Y ~ A + B + A:B + D + C%in%B%in%A, data = M)
mod
# mod[]
simple.glht(mod,'A:B')
mydata <- data.frame(y = rnorm(12),
x = factor(c(rep(2,4),rep(1,4),rep(0,4))),
z = factor(rep(c(1,0),6)))
mixlm <- lm(y~x*r(z),
data = mydata)
Anova(mixlm,type="III")
library(mixlm)
mydata <- data.frame(y = rnorm(12),
x = factor(c(rep(2,4),rep(1,4),rep(0,4))),
z = factor(rep(c(1,0),6)))
mixlm <- lm(y~x*r(z),
data = mydata)
Anova(mixlm,type="III")
simple.glht(mixlm, "x")
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
multcomp:::mcp
multcomp:::glht
multcomp:::glht.mcp
multcomp:::print.confint.glht
multcomp:::glht
multcomp:::glht.mcp
multcomp:::mcp2matrix2
mydata <- data.frame(y = rnorm(12),
x = factor(c(rep(2,4),rep(1,4),rep(0,4))),
z = factor(rep(c(1,0),6)))
mixlm <- lm(y~x*z,
data = mydata)
Anova(mixlm,type="III")
simple.glht(mixlm, "x")
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
multcomp:::glht.matrix
vcov(mixlm)
3.0683 /2.3432
sqrt(2)
3.0683 /sqrt(2)
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
summary(multcomp::glht(mixlm, "x")
)
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Fisher")))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
summary(multcomp::glht(mixlm, linfct = c("1 - 0 = 0", "2 - 0 = 0", "2 - 1 = 0")))
summary(multcomp::glht(mixlm, linfct = c("'1' - '0' = 0", "'2' - '0' = 0", "'2' - '1' = 0")))
summary(multcomp::glht(mixlm, linfct = mcp(x = c("'1' - '0' = 0", "'2' - '0' = 0", "'2' - '1' = 0"))))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = c("'1' - '0' = 0", "'2' - '0' = 0", "'2' - '1' = 0"))))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = c("1 - 0 = 0", "2 - 0 = 0", "2 - 1 = 0"))))
contr <- rbind("1 - 0" = c(-1, 1 0),"2 - 0" = c(-1,0,1),"2 - 1" = c(0,-1,1))
contr <- rbind("1 - 0" = c(-1, 1, 0), "2 - 0" = c(-1,0,1), "2 - 1" = c(0,-1,1))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr))
)
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr)))
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
contr <- rbind("1 - 0" = c(-1, 1, 0))
confint(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr)))
contr <- rbind("1 - 0" = c(-1, 1, 0), "2 - 0" = c(-1,0,1), "2 - 1" = c(0,-1,1))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr)))
contr <- rbind("1 - 0" = c(-1, 1, 0))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = contr)))
2*(1-tp(abs(2.246),2))
2*(1-qt(abs(2.246),2))
2*(1-qt(abs(2.246),1000))
2*(1-pt(abs(2.246),1000))
1-qtukey(sqrt(2)*2.246,1000,3)
1-qtukey(sqrt(2)*2.246,3,1000)
1-qtukey(sqrt(2)*2.246,3,100)
1-qtukey(sqrt(2)*2.246,3,10)
1-ptukey(sqrt(2)*2.246,3,10)
1-ptukey(sqrt(2)*2.246,3,10000)
1-ptukey(sqrt(2)*2.246,3,10000, lower.tail=FALSE)
ptukey(sqrt(2)*2.246,3,10000, lower.tail=FALSE)
qtukey(0.95,3,10000)
qtukey(0.95,3,10000)/sqrt(2)
(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"))[])
multcomp::modelparm(mixlm)
mixx <- mixlm
class(mixx) <- "lm"
multcomp::modelparm(mixlm)
multcomp::modelparm(mixx)
(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey")))
(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=3))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=3))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=2))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=1))
simple.glht(mixlm, "x")
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=5))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=6))
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=7))
?simple.glht
summary(multcomp::glht(mixlm, linfct = multcomp::mcp(x = "Tukey"), df=Inf))
library(mixlm)
simple.glht(mixlm, "x")
simple.glht(mixlm, "x", df=Inf)
simple.glht(mixlm, "x", df=100)
simple.glht(mixlm, "x", df=1000)
qtukey(0.05,2,2)/sqrt(2)
qtukey(0.05,2,20)/sqrt(2)
qtukey(0.05,2,2000)/sqrt(2)
pqtukey(0.05,2,2000)/sqrt(2)
ptukey(0.05,2,2000)/sqrt(2)
ptukey(0.05,2,2)/sqrt(2)
library(mixlm)
simple.glht(mixlm, "x", df=1000)
simple.glht(mixlm, "x", df=Inf)
Tab <- read.csv("~/NMBU/Tove Kristina Sundgren/15GHRHIZO aerenchyma semc.csv")
Tab <- read.csv2("~/NMBU/Tove Kristina Sundgren/15GHRHIZO aerenchyma semc.csv")
View(Tab)
lmd4 <- lm(Cortex ~ Sort + Location
+ Location:Sort
+r(Rep)+r(Lengdegrupp)%in%Location%in%Sort,
data=acs)
lmd4 <- lm(Cortex ~ Sort + Location
+ Location:Sort
+r(Rep)+r(Lengdegrupp)%in%Location%in%Sort,
data=Tab)
View(Tab)
Tab <- within(Tab, {Lengdegrupp <- factor(Lengdegrupp)
Rep <- factor(Rep)})
lmd4 <- lm(Cortex ~ Sort + Location
+ Location:Sort
+r(Rep)+r(Lengdegrupp)%in%Location%in%Sort,
data=Tab)
Anova(lmd4)
Anova(lmd4, type =2)
Anova(lmd4, type =3)
simple.glht(lmd4, "sort")
simple.glht(lmd4, "Sort")
simple.glht(lmd4, "Sort", df=Inf)
anova(lmd4)
simple.glht(lmd4, "Location")
cld(simple.glht(lmd4, "Location"))
mixlm <- lm(y~x*r(z), data = mydata)
simple.glht(mixlm, "x")
simple.glht(mixlm, "x", df=Inf)
library(htmlwidgets)
multcomp:::cld
multcomp:::cld.summary.glht
multcomp:::insert_absorb()
multcomp:::insert_absorb
multcomp:::cld.confint.glht
library(mixlm)
amod <- aov(breaks ~ tension, data = warpbreaks)
### specify all pair-wise comparisons among levels of variable "tension"
tuk <- glht(amod, linfct = mcp(tension = "Tukey"))
library(multcomp)
amod <- aov(breaks ~ tension, data = warpbreaks)
### specify all pair-wise comparisons among levels of variable "tension"
tuk <- glht(amod, linfct = mcp(tension = "Tukey"))
confint(tuk)
cld(confint(tuk))
confint(tuk)
confint(tuk)[]
amod
summary(amod)
levels(warpbreaks$tension)
library(mixlm)
?simple.glht
summary(fm1 <- lm(breaks ~ wool + tension, data = warpbreaks))
simple.glht(fm1, "tension")
plot(simple.glht(fm1, "tension"))
cld(simple.glht(fm1, "tension"))

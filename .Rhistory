mt
mf
class(mf)
attributes(mf)
model.frame.default
?model.frame
lm(y~A*B, data=dat)
mf
lm(y~A+A:B, data=dat)
mf$drop.unused.levels <- TRUE
mf[[1L]] <- as.name("model.frame")
mg <- eval(mf, parent.frame())
attributes(mg)
attr(mg,"factors")
attr(mg$terms,"factors")
mg
mg$terms
attr(mg,"terms")
attr(attr(mg,"terms"), "factors")
attr(attr(mg,"terms"), "factors")[2,1]
attr(attr(mg,"terms"), "factors")[2,2]
attr(attr(mg,"terms"), "factors")[2,2] <- 1
method
mt <- attr(mf, "terms") # allow model.frame to update it
y <- model.response(mf, "numeric")
model.response
y <- model.response(mg, "numeric")
# Create contrast list if single character argument is supplied to contrasts (edit by KHL)
contrasts.orig <- contrasts
mf <- mg
if(!is.null(contrasts)){
if(is.character(contrasts) && length(contrasts)==1){
# Handle contrasts given as a signle string
facs <- which(unlist(lapply(mf, inherits, what = "factor")))
if(contrasts == "contr.treatment.last"){ # Force last level of factor to base level
contrasts <- lapply(mf[names(facs)], function(f){nl <- nlevels(f); contr.treatment(nl,nl)})
} else
if(contrasts == "contr.weighted")
contrasts <- lapply(mf[facs], "contr.weighted")
else {
contrasts <- as.list(rep(contrasts, length(facs)))
names(contrasts) <- names(facs)
}
} else {
# Handle contrasts given as lists
if(is.list(contrasts)){
facs <- which(unlist(lapply(mf, inherits, what = "factor")))
if(length(facs) != length(contrasts))
stop("Number of contrasts must match number of factors when specified separately")
for(i in 1:length(contrasts)){
if(contrasts[[i]] == "contr.treatment.last"){ # Force last level of factor to base level
nl <- nlevels(mf[[names(contrasts)[i]]])
contrasts[[i]] <- contr.treatment(nl,nl)
} else
if(contrasts[[i]] == "contr.weighted")
contrasts[[i]] <- contr.weighted(mf[[names(contrasts)[i]]])
else {
contrasts[[i]] <- contrasts[[i]]
}
}
}
}
}
## avoid any problems with 1D or nx1 arrays by as.vector.
w <- as.vector(model.weights(mf))
if(!is.null(w) && !is.numeric(w))
stop("'weights' must be a numeric vector")
offset <- as.vector(model.offset(mf))
offset
is.empty.model(mt)
mt
mt <- attr(mf, "terms") # allow model.frame to update it
mt
x <- model.matrix(object=mt, data=mf, contrasts.arg=contrasts)
mt
mt
terms(y~A+A:B)
attr(terms(y~A+A:B),"factors")
attr(terms(y~A+B+A:B),"factors")
lm(y~A+A:B, data=dat)
eformula
mt
mf
attributes(mf)
attr(mf)
attr(mf, "terms")
mfe <- mf
attr(mfe, "terms") <- terms(eformula)
attributes(mfe)
model.matrix(object=mt, data=mfe, contrasts.arg=contrasts)
mte <- terms(eformula)
model.matrix(object=mte, data=mf, contrasts.arg=contrasts)
xe <- model.matrix(object=mte, data=mf, contrasts.arg=contrasts)
xe
mt
mte
attributes(xe)
attributes(x)
effect.sources <- effect.source(mt,mf)
effect.source(mt,mf)
effect.source(mte,mf)
lm(y~A+A:B, data=dat)
mte <- terms(eformula)
xe <- model.matrix(object=mte, data=mf, contrasts.arg=contrasts)
effect.sources <- effect.source(mte,mf)
diff(effect.sources, efactors)
lm(y~A+A:B, data=dat)
mte <- terms(eformula)
xe <- model.matrix(object=mte, data=mf, contrasts.arg=contrasts)
effect.sources <- effect.source(mte,mf)
effect.sources
efactors
set.diff(effect.sources, efactors)
setdiff(effect.sources, efactors)
lm(y~A+A:B, data=dat)
lm(y~A+A:B, data=dat)
summart(lm(y~A+A:B, data=dat))
summary(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat))
summary(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat))
mte
mt
x
attributes(x)
xe
kronecker(contr.sum(3),contr.sum(2))
kronecker(contr.sum(2),contr.sum(2))
?contr.poly
dat
colnames(dat)
colnames(dat)[5]
colnames(dat)[5] <- `A:B`
colnames(dat)[5] <- "A:B""
colnames(dat)[5] <- "A:B"
head(dat)
anova(lm(y~A+A:B, data=dat))
x
colnames(dat)[5] <- "A;B"
head(dat)
anova(lm(y~A+A;B, data=dat))
anova(lm(y~A+`A;B`, data=dat))
x
formula
anova(lm(y~A+A:B, data=dat))
formula
colnames(dat)[5] <- "A:B"
anova(lm(y~A+`A:B`, data=dat))
anova(lm(y~A+A:B, data=dat))
formula
formula[2]
formula[3]
formula[[3]]
terms(formula)
terms(formula(y~A*B))
terms(formula(y~A+A:B))
terms(formula(y~A+log(A):B))
terms(formula(y~A+I(A:B))
)
anova(lm(y~A+I(A:B), data=dat))
anova(lm(y~A+I(A:B), data=dat))
x
anova(lm(y~A+I(A:B), data=dat, contrasts=list(A="contr.sum", `I(A:B)`="contr.treatment")))
x
anova(lm(y~A+I(A:B), data=dat, contrasts=list(A="contr.sum", `I(A:B)`=kronecker(contr.sum(2),contr.sum(2)))))
kronecker(contr.sum(2),contr.sum(2))
anova(lm(y~A+I(A:B), data=dat, contrasts=list(A="contr.sum", `I(A:B)`="contr.weighted")))
attributes(x)
attributes(x)$contrasts
attributes(x)$contrasts[[2]]
class(attributes(x)$contrasts[[2]])
kronecker(contr.sum(2),contr.sum(2))
contr.sum(2)
anova(lm(y~A+I(A:B), data=dat, contrasts=list(A=contr.sum(2), `I(A:B)`="contr.weighted")))
contrasts
anova(lm(y~A+I(A:B), data=dat, contrasts=list(A=contr.sum(2), `I(A:B)`="contr.weighted")))
x
anova(lm(y~A+I(A:B), data=dat, contrasts=list(A="contr.sum", `I(A:B)`=kronecker(contr.sum(2),contr.sum(2)))))
x
anova(lm(y~A+A:B, data=dat, contrasts=list(A="contr.sum", `A:B`=kronecker(contr.sum(2),contr.sum(2)))))
model.matrix(lm(y~A+I(A:B), data=dat, contrasts=list(A="contr.sum", `I(A:B)`=kronecker(contr.sum(2),contr.sum(2)))))
anova(lm(y~A+`A:B`, data=dat, contrasts=list(A="contr.sum", `A:B`=kronecker(contr.sum(2),contr.sum(2)))))
model.matrix(lm(y~A+`A:B`, data=dat, contrasts=list(A="contr.sum", `A:B`=kronecker(contr.sum(2),contr.sum(2)))))
mixlm:::.extend_formula(y~A+A:B)
mixlm:::.extend_formula(y~`A`+A:B)
mixlm:::.extend_formula(y~A+`A:B`)
traceback()
mixlm:::.extend_formula(y~A+`A:B`)
main_effects
missing_main_effects
grepl(variables,"`")
grepl("`",variables)
grepl("`",interactions)
mixlm:::.extend_formula(y~A+`A:B`)
?contr.poly
anova(lm(y~A+A:B, data=dat))
contrasts
mixlm:::.extend_formula(y~A+A:B)
mixlm:::.extend_formula(y~A+A:B)
missing_main_effects
lapply(interactions, function(i){any(missing_main_effects %in% unlist(strsplit(i)))})
lapply(interactions, function(i){any(missing_main_effects %in% unlist(strsplit(i, ":")))})
unlist(lapply(interactions, function(i){any(missing_main_effects %in% unlist(strsplit(i, ":")))}))
anova(lm(y~A+A:B, data=dat))
.extend_formula(formula)
anova(lm(y~A+A:B, data=dat))
.extend_formula(formula)
eformula <- .extend_formula(formula)
eformula
mf
colnames(mf)
ncol(mf)
strsplit(eformula$interactions[1],":")
strsplit(eformula$interactions[1],":")[[1]]
mf[strsplit(eformula$interactions[1],":")[[1]]]
interaction(mf[strsplit(eformula$interactions[1],":")[[1]]])
for(i in 1:length(eformula$interactions)){
mf[ncol(mf)+1] <- interaction(mf[strsplit(eformula$interactions[1],":")[[1]]])
}
mf
colnames(mf)[ncol(mf)-length(eformula$interactions)+1:ncol(mf)] <- eformula$interactions
colnames(mf)[ncol(mf)-length(eformula$interactions)+1:ncol(mf)]
colnames(mf)[ncol(mf)-length(eformula$interactions)+1:ncol(mf)]
ncol(mf)
ncol(mf)-length(eformula$interactions)+1
ncol(mf)-length(eformula$interactions)
colnames(mf)[ncol(mf)-length(eformula$interactions):ncol(mf)] <- eformula$interactions
mf
anova(lm(y~A+A:B, data=dat))
## Expand model.frame and adapt formula if necessary for missing main effects
eformula <- .extend_formula(formula)
if(!is.null(eformula$interactions)){
for(i in 1:length(eformula$interactions)){
mf[ncol(mf)+1] <- eformula$interaction(mf[strsplit(eformula$interactions[1],":")[[1]]])
}
colnames(mf)[(ncol(mf)-length(eformula$interactions)):ncol(mf)] <- eformula$interactions
}
anova(lm(y~A+A:B, data=dat))
## Expand model.frame and adapt formula if necessary for missing main effects
eformula <- .extend_formula(formula)
!is.null(eformula$interactions)
for(i in 1:length(eformula$interactions)){
mf[ncol(mf)+1] <- eformula$interaction(mf[strsplit(eformula$interactions[1],":")[[1]]])
}
anova(lm(y~A+A:B, data=dat))
## Expand model.frame and adapt formula if necessary for missing main effects
eformula <- .extend_formula(formula)
for(i in 1:length(eformula$interactions)){
mf[ncol(mf)+1] <- interaction(mf[strsplit(eformula$interactions[1],":")[[1]]])
}
colnames(mf)[(ncol(mf)-length(eformula$interactions)):ncol(mf)] <- eformula$interactions
mf
anova(lm(y~A+A:B, data=dat))
mf
formula
as.character(formula)
grep(eformula$interactions[[1]],as.character(formula))
gsub(eformula$interactions[[1]],paste0("`",eformula$interactions[[1]],"Â´"),as.character(formula))
gsub(eformula$interactions[[1]],paste0("`",eformula$interactions[[1]],"`"),as.character(formula))
formula(gsub(eformula$interactions[[1]],paste0("`",eformula$interactions[[1]],"`"),as.character(formula)))
environment(formula)
anova(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat))
mt
terms(formula)
anova(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat))
contrasts
M <- "A"
contrasts[as.name(M)]
contrasts[M]
kronecker(contrasts[1:2])
?kronecker
do.call(kronecker, contrasts)
do.call(contrasts,kronecker)
do.call(kronecker, as.list(contrasts))
?do.call
kronecker(matrix(1:4,2),matrix(1:4,2))
matrix(1:4,2) %o% matrix(1:4,2)
.krons <- function(x){
k <- kronecker(x[[1]], x[[2]])
for (i in 3:length(x))
k <- kronecker(k, x[[i]])
return(k)
}
.krons(contrasts)
length(contrasts)
class(contrasts)
.krons <- function(x){
if (length(x) == 1)
return(x[[1]])
k <- kronecker(x[[1]], x[[2]])
if (length(x) == 2)
return(k)
for (i in 3:length(x))
k <- kronecker(k, x[[i]])
return(k)
}
.krons(contrasts)
eformula
names(contrasts)
strsplit(eformula$interactions[[1]],":")
strsplit(eformula$interactions[[1]],":")[[1]]
contrasts[strsplit(eformula$interactions[[1]],":")[[1]]]
.krons(contrasts[strsplit(eformula$interactions[[1]],":")[[1]]])
i<-1
contrasts[length(contrasts)+1] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
contrasts[length(contrasts) + 1]
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
contrasts
names(contrasts)(length(contrasts)) <- eformula$interactions[[i]]
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
contrasts
formula
anova(lm(y~A+A:B, data=dat))
for(i in 1:length(eformula$interactions)){
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
}
contrast
contrasts
eval(mf, parent.frame())
mf
anova(lm(y~A+A:B, data=dat))
for(i in 1:length(eformula$interactions)){
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
}
contrasts
eformula$missing
setdiff(names(contrasts), eformula$missing)
anova(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat, equal_baseline=TRUE))
# Full contrasts
contr.full <- function(n){
diag(rep(1,n))
}
contr.full(10)
contr.sum(3)
contr.sum
anova(lm(y~A+A:B, data=dat, equal_baseline=TRUE))
model.matrix(lm(y~A+A:B, data=dat, equal_baseline=TRUE))
dat
Test equal_baseline med mer enn to nivÃ¥er i faktorene!
dat3 <- data.frame(y=rnorm(24),A=factor(c(rep(1,8),rep(2,8),rep(3,8))), B=factor(rep(c(1,2),12)), C=factor(rep(c(1,1,2,2),6)))
model.matrix(lm(y~A+A:B, data=dat3))#, equal_baseline=TRUE))
model.matrix(lm(y~A+A:B, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3))#, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3, equal_baseline=TRUE))
dat3
contrasts(dat3)
contrasts(dat3$A)
contrasts(dat3$B)
contrasts(dat3$C)
contrasts(dat3$A) <- contr.full(3)
stats::lm(y~A*B, data=dat3)
contrasts(dat3$A)
contr.full(3)
?contrasts
options(contrasts)
options("contrasts")
options(contrasts = list("contr.full","contr.poly"))
options(contrasts = list("contr.treatment","contr.poly"))
options(contrasts = list(unordered="contr.treatment",ordered="contr.poly"))
contrasts(dat3$A) <- contr.sum(3)
contrasts(dat3$A)
contrasts(dat3$A) <- contr.full(3)
contrasts(dat3$A)
stats::lm(y~A*B, data=dat3)
contrasts(dat3$A) <- contr.treatment(3)
stats::lm(y~A*B, data=dat3)
stats::model.frame(stats::lm(y~A*B, data=dat3))
stats::model.matrix(stats::lm(y~A*B, data=dat3))
contrasts(dat3$A) <- contr.full(3)
stats::model.matrix(stats::lm(y~A*B, data=dat3))
contrasts(dat3$A) <- "contr.full"
stats::model.matrix(stats::lm(y~A*B, data=dat3))
contr.treatment
# Full contrasts
contr.full <- function (n, base = NULL, contrasts = TRUE, sparse = FALSE){
if (is.numeric(n) && length(n) == 1L) {
if (n > 1L)
levels <- as.character(seq_len(n))
else stop("not enough degrees of freedom to define contrasts")
}
else {
levels <- as.character(n)
n <- length(n)
}
contr <- .Diag(levels, sparse = sparse)
if (contrasts) {
if (n < 2L)
stop(gettextf("contrasts not defined for %d degrees of freedom",
n - 1L), domain = NA)
#    if (base < 1L || base > n)
#      stop("baseline group number out of range")
#    contr <- contr[, -base, drop = FALSE]
}
contr
}
stats::model.matrix(stats::lm(y~A*B, data=dat3))
stats:::.Diag
# Function copied from package stats
.Diag <- function (nms, sparse){
n <- as.integer(length(nms))
d <- c(n, n)
dn <- list(nms, nms)
if (sparse) {
if (!suppressPackageStartupMessages(requireNamespace("Matrix")))
stop(gettextf("%s needs package 'Matrix' correctly installed",
"contr*(.., sparse=TRUE)"), domain = NA)
methods::new("ddiMatrix", diag = "U", Dim = d, Dimnames = dn)
}
else array(c(rep.int(c(1, numeric(n)), n - 1L), 1), d, dn)
}
stats::model.matrix(stats::lm(y~A*B, data=dat3))
stats::anova(stats::lm(y~A*B, data=dat3))
stats::lm(y~A*B, data=dat3)
stats::lm(y~A+B, data=dat3)
stats::lm(y~A, data=dat3)
contr.full(3)
contr.full(3, FALSE)
contr.full(3, TRUE)
contr.full(3, TRUE, TRUE)
contr.full(3, TRUE, FALSE)
contr.full(3, TRUE, FALSE, TRUE)
contr.full(3, TRUE, FALSE, FALSE)
contr.full(3, TRUE, TRUE, FALSE)
model.matrix(stats::lm(y~A, data=dat3))
qr(model.matrix(stats::lm(y~A, data=dat3)))
qr_decomposition <- qr(model.matrix(stats::lm(y~A, data=dat3)))
# Extract Q and R
Q <- qr.Q(qr_decomposition)
R <- qr.R(qr_decomposition)
# Solve for coefficients (beta) using back-substitution
beta <- solve(R, t(Q) %*% y)
dim(Q)
dim(y)
dim(R)
dim(solve(R, t(Q))
)
R
rm(contr.full)
rm(create_crossed_interaction_matrix())
rm(create_crossed_interaction_matrix
)
rm(extend_formula())
rm(extend_formula)
devtools::check()
devtools::check()
?anova_reg
anova_reg(lm(y~x, data=data.frame(y=1:4,x=rnorm(4))))
lm(y~x, data=data.frame(y=1:4,x=rnorm(4)))
traceback()
?factor
model.matrix
model.matrix.default
lm(y~x, data=data.frame(y=1:4,x=rnorm(4)))
lm(y~x, data=data.frame(y=1:4,x=rnorm(4)))
contrasts
mf
attributes(mf)
lm(y~x, data=data.frame(y=1:4,x=rnorm(4)))
dat3c <- data.frame(y=rnorm(24),A=c(rep(1,8),rep(2,8),rep(3,8)), B=rep(c(1,2),12), C=rep(c(1,1,2,2),6))
anova(lm(y~A+A:B, data=dat3, equal_baseline=TRUE))
eformula
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
eformula
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
eformula
inherits(mf$"A", "formula")
lapply(mf[eformula$variables],inherits)
lapply(mf[eformula$variables], inherits, what="factor")
unlist(lapply(mf[eformula$variables], inherits, what="factor"))
!all(unlist(lapply(mf[eformula$variables], inherits, what="factor")))
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B+C, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
eformula
length(eformula$interactions)
# Expand mf
for(i in 1:length(eformula$interactions)){
mf[ncol(mf)+1] <- interaction(mf[strsplit(eformula$interactions[1],":")[[1]]])
}
head(mf)
colnames(mf)[(ncol(mf)-length(eformula$interactions)+1):ncol(mf)]
colnames(mf)[(ncol(mf)-length(eformula$interactions)+1):ncol(mf)] <- eformula$interactions
colnames(mf)
# Adapt formula
for(i in 1:length(eformula$interactions)){
formula <- formula(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)))
}
formula
mt <- terms(formula)
mt
for(i in 1:length(eformula$interactions)){
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
}
contrasts
dat3
anova(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
model.frame(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
devtools::check()
devtools::check_win_devel()

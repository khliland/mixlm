install.packages("olsrr")
library(olsrr)
ols_plot_resid_fit?
?ols_plot_resid_fit
model <- lm(mpg ~ disp + hp + wt, data = mtcars)
ols_plot_resid_fit(model)
lm
class(lm)
class(model)
ols_plot_resid_fit
check_model(model)
olsrr:::check_model(model)
olsrr:::check_model
lmm
UseMethod(lmm)
UseMethod('lmm')
methods('lmm')
summary.lmm
class(model) <- "lm"
ols_plot_added_variable(model)
?mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
class(mixlm)
class(mixlm) <- "lm"
ols_plot_added_variable(mixlm)
simple.glht(mixlm,"x:z")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
simple.glht(mixlm,"x:z")
simple.glht(mixlm,"x:z", corr="Tukey")
simple.glht(mixlm,"x:z", corr="Tukey", level=0.95)
mixlm::simple.glht(mixlm,"x:z", corr="Tukey", level=0.95)
??devtools
??check
??check
??checkCRAN
?checkCRAN
rhub::check(platform="debian")
rhub::platforms()
rhub::check(platform="debian-clang-devel")
devtools::check_win_devel()
rhub::check(platform="debian-clang-devel")
devtools::check_win_devel()
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
seed(1)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
set.seed(1)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
set.seed(42)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
CIgrandMean(mixlm)
rhub::check(platform="debian-gcc-devel")
rhub::check(platform="debian-gcc-devel")
?eval
library(mixlm)
?mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
class(mixlme)
class(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
a <- anova(mixlm)
a
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(dataset$y~dataset$x*dataset$z)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(dataset$y~dataset$x*dataset$z)
Anova(mixlm,type="II")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(dataset$y~dataset$x*dataset$z)
anova(mixlm)
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
car::Anova()
car::Anova.lm()
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
anova(mixlm)
stats::anova
car::Anova
Anova
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(dataset$y~dataset$x*dataset$z)
anova(mixlm)
Anova(mixlm)
library(mixlm)
Anova(mixlm)
summary(mixlm)
Anova(mixlm, type="III")
?readBin
setwd("C:/Users/kristl/OneDrive - Norwegian University of Life Sciences/Artikler/Avsluttet/MALDI-TOF/data")
## Things to add: ##$ACQMETH, ##$AXMeth (they contain <text>)
readMaldi <- function(path, acqu = 1) {
acqulines <- readLines(file.path(path, acqu, "1SLin", "acqu"))
## Name of the parametres we want to extract:
params <- c("ML1", "ML2", "ML3", "ML1_raw", "ML2_raw", "ML3_raw",
"DW", "DELAY", "TD", "PIEDLY", "NoSHOTS", "ATTEN",
"BYTORDA")
## Extract the matching lines:
pattern <- paste("^##\\$?(", paste(params, collapse = "|"),
")=", sep = "")
matches <- sub("^##\\$?", "", grep(pattern, acqulines, value = TRUE))
## Create a named list of attributes:
attrs <-
eval(parse(text = paste("list(", paste(matches, collapse = ","), ")")))
## Read the spectral values:
spec <- readBin(file.path(path, acqu, "1SLin", "fid"), what = "int",
n = attrs$TD + 1,
endian = ifelse(attrs$BYTORDA, "big", "little"))
## Check length:
if (length(spec) != attrs$TD)
stop("Length of spectrum does not match the `TD' parameter.")
## Remove unwanted attributes:
attrs$BYTORDA <- NULL
attributes(spec) <- attrs
spec
}
mzvals <- function(x, DELAY = attr(x, "DELAY"), DW = attr(x, "DW"),
c0 = attr(x, "ML2"), c1 = attr(x, "ML1"),
c2 = attr(x, "ML3"), start.at.one = TRUE) {
if (is.null(attr(x, "TD"))) {
## x is not a spectrum.  Check that no parametres are missing:
if (any(c(missing(DELAY), missing(DW), missing(c0), missing(c1),
missing(c2))))
stop("DELAY, DW, c0, c1 or c2 missing.")
ind <- if(isTRUE(start.at.one)) x - 1 else x
} else {
## Spectrum.  Make a 0, 1, ..., TD - 1 vector:
ind <- seq(from = 0, length.out = attr(x, "TD"))
}
tof <- DW * ind + DELAY - c0
k <- c1 / 2.5e11
k * (tof / (1 + sqrt(1 + c2 * k * tof)))^2
}
## Things to add: ##$ACQMETH, ##$AXMeth (they contain <text>)
readMaldi <- function(path, acqu = 1) {
acqulines <- readLines(file.path(path, acqu, "1SLin", "acqu"))
## Name of the parametres we want to extract:
params <- c("ML1", "ML2", "ML3", "ML1_raw", "ML2_raw", "ML3_raw",
"DW", "DELAY", "TD", "PIEDLY", "NoSHOTS", "ATTEN",
"BYTORDA")
## Extract the matching lines:
pattern <- paste("^##\\$?(", paste(params, collapse = "|"),
")=", sep = "")
matches <- sub("^##\\$?", "", grep(pattern, acqulines, value = TRUE))
## Create a named list of attributes:
attrs <-
eval(parse(text = paste("list(", paste(matches, collapse = ","), ")")))
## Read the spectral values:
spec <- readBin(file.path(path, acqu, "1SLin", "fid"), what = "int",
n = attrs$TD + 1,
endian = ifelse(attrs$BYTORDA, "big", "little"))
browser()
## Check length:
if (length(spec) != attrs$TD)
stop("Length of spectrum does not match the `TD' parameter.")
## Remove unwanted attributes:
attrs$BYTORDA <- NULL
attributes(spec) <- attrs
spec
}
### The milk samples (A1-A12, ..., J1-H12, K1-K10, ..., P1-P10):
spotRad <- c(rep(1:10, 12), rep(11:16, 10))
msdir <- "blanding_serie1"
### The milk samples (A1-A12, ..., J1-H12, K1-K10, ..., P1-P10):
spotRad <- c(rep(1:10, 12), rep(11:16, 10))
spotKol <- c(rep(1:12, each = 10), rep(1:10, each = 6))
spotIDs <- paste(LETTERS[spotRad], spotKol, sep = "")
## Check that all directories are there:
all.equal(sort(list.files(msdir)), sort(paste("0_", spotIDs, sep = "")))
## Read the files:
tmp <- list()
for (spot in spotIDs)
tmp[[spot]] <- readMaldi(paste(msdir, "/0_", spot, sep = ""))
msdir <- "Melk/2006-08-30/blanding_serie1"
tmp[[spot]] <- readMaldi(paste(msdir, "/0_", spot, sep = ""))
function(path, acqu = 1) {
acqulines <- readLines(file.path(path, acqu, "1SLin", "acqu"))
## Name of the parametres we want to extract:
params <- c("ML1", "ML2", "ML3", "ML1_raw", "ML2_raw", "ML3_raw",
"DW", "DELAY", "TD", "PIEDLY", "NoSHOTS", "ATTEN",
"BYTORDA")
## Extract the matching lines:
pattern <- paste("^##\\$?(", paste(params, collapse = "|"),
")=", sep = "")
matches <- sub("^##\\$?", "", grep(pattern, acqulines, value = TRUE))
## Create a named list of attributes:
attrs <-
eval(parse(text = paste("list(", paste(matches, collapse = ","), ")")))
## Read the spectral values:
spec <- readBin(file.path(path, acqu, "1SLin", "fid"), what = "int",
n = attrs$TD + 1,
endian = ifelse(attrs$BYTORDA, "big", "little"))
browser()
## Check length:
if (length(spec) != attrs$TD)
stop("Length of spectrum does not match the `TD' parameter.")
## Remove unwanted attributes:
attrs$BYTORDA <- NULL
attributes(spec) <- attrs
spec
}
file.path(path, acqu, "1SLin", "fid")
tail(spec)
library(mixlm)
?mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset, REML = TRUE)
mixlm
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y ~ (x*z*r(v))^2, data = dataset)
mixlm
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y ~ (x*z*r(v))^2, data = dataset, REML = TRUE)
mixlm
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y ~ (x+z+r(v))^2, data = dataset)
mixlm
dataset   <- data.frame(y=rnorm(16), x=factor(c(rep(1,8),rep(0,8))), z=factor(rep(c(1,0),8)), v=factor(rep(c(1,1,0,0),4)))
mixlm <- lm(y ~ (x+z+r(v))^2, data = dataset, REML = TRUE)
mixlm
library(mixlm)
library(mixlm)
smokers  <- c( 83, 90, 129, 70 )
patients <- c( 86, 93, 136, 82 )
prop.test(smokers, patients)
prop.test(smokers, patients, correct = FALSE)
mixlm::prop.test.ordinary(smokers, patients, correct = FALSE, pooled = FALSE)
library(mixlm)
smokers  <- c( 83, 90, 129, 70 )
patients <- c( 86, 93, 136, 82 )
prop.test(smokers, patients)
prop.test(smokers, patients, correct = FALSE)
mixlm::prop.test.ordinary(smokers, patients, correct = FALSE, pooled = FALSE)
library(mixlm)
smokers  <- c( 83, 90, 129, 70 )
patients <- c( 86, 93, 136, 82 )
prop.test(smokers, patients)
prop.test(smokers, patients, correct = FALSE)
mixlm::prop.test.ordinary(smokers, patients, correct = FALSE, pooled = FALSE)
library(devtools)
check_win_devel()
citation("mixlm")
library(oreo)
?oreo
?mydata
library(mixlm)
?mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
i
j <- 1
effect.names
effect.names <- is.element(strsplit(all.effects[j],":")[[1]],this.effect)
effect.names
i
j
which.contains <- sort(which.contains)
length(which.contains)
approved.interactions
approved.interactions[[i]]
approved.interactions[[i]] <- FALSE
approved.interactions.fixed[[i]] <- FALSE
approved.interactions
approved.interactions.fixed
i
n.effects
all.effects
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
approved.interaction
approved.interactions
approved.interactions.fixed
approved.interaction.fixed
random.effects
main.rands.only.inter
fixed.effects
random.effects
all.effects
object$model
ind.randoms
ind.fixed
n.randoms
fixed.model
which.contains
i
j
i=2
sum(effect.names)
this.effect <- strsplit(all.effects[i],":")[[1]]
this.effect
length(this.effect)
effect.names <- is.element(strsplit(all.effects[j],":")[[1]],this.effect)
effect.names
approved.interactions
i
j
j <- 1
effect.names <- is.element(strsplit(all.effects[j],":")[[1]],this.effect)
effect.names
sum(effect.names)==length(this.effect)
this.effect
sum(effect.names)
approved.interactions
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
which.contains
i
j
sum(effect.names)==length(this.effect)
length(this.effect)
effect.names
numeric(length(which.contains))
which.contains
length(which.contains)
length(which.contains)
approved.interaction
all.effects[which.contains]
all.effects[i]
strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]])
strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]]
setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]])
j
j <- 1
setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]])
is.element(ind.fixed,i))
is.element(ind.fixed,i)
i
prod(is.element(setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]]),fixed.effects))}
prod(is.element(setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]]),fixed.effects))
prod(!is.element(strsplit(all.effects[which.contains],":")[[j]],c(random.effects,main.rands.only.inter)))}
prod(!is.element(strsplit(all.effects[which.contains],":")[[j]],c(random.effects,main.rands.only.inter)))
which(approved.interaction==1)
approved.interaction <- numeric(length(which.contains))
approved.interaction.fixed <- numeric(length(which.contains))
for(j in 1:length(which.contains)){
if(restrictedModel){
# Check if any of the other main effect contained in the higher order interaction is random
approved.interaction[j] <- prod(is.element(setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]]),c(random.effects,main.rands.only.inter)))}
else{
if(any(is.element(ind.fixed,i))){
# Check if any of the other main effects contained in the higher order interaction is fixed
approved.interaction.fixed[j] <- prod(is.element(setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]]),fixed.effects))}
# Check if any of the main effects contained in the current effect is random
approved.interaction[j] <- 1-prod(!is.element(strsplit(all.effects[which.contains],":")[[j]],c(random.effects,main.rands.only.inter)))}
}
which(approved.interaction==1)
which.contains
approved.interaction <- numeric(length(which.contains))
approved.interaction.fixed <- numeric(length(which.contains))
for(j in 1:length(which.contains)){
if(restrictedModel){
# Check if any of the other main effect contained in the higher order interaction is random
approved.interaction[j] <- prod(is.element(setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]]),c(random.effects,main.rands.only.inter)))}
else{
if(any(is.element(ind.fixed,i))){
# Check if any of the other main effects contained in the higher order interaction is fixed
approved.interaction.fixed[j] <- prod(is.element(setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]]),fixed.effects))}
# Check if any of the main effects contained in the current effect is random
approved.interaction[j] <- 1-prod(!is.element(strsplit(all.effects[which.contains],":")[[j]],c(random.effects,main.rands.only.inter)))}
}
approved.interaction
approved.interaction.fixed
j
is.element(strsplit(all.effects[which.contains],":")[[j]],c(random.effects,main.rands.only.inter)
)
!is.element(strsplit(all.effects[which.contains],":")[[j]],c(random.effects,main.rands.only.inter)
)
prod(!is.element(strsplit(all.effects[which.contains],":")[[j]],c(random.effects,main.rands.only.inter)))
which.contains
approved.interaction.fixed
which(approved.interaction.fixed==1)
length(which(approved.interaction.fixed==1))>0
approved.interaction <- numeric(length(which.contains))
approved.interaction.fixed <- numeric(length(which.contains))
for(j in 1:length(which.contains)){
if(restrictedModel){
# Check if any of the other main effect contained in the higher order interaction is random
approved.interaction[j] <- prod(is.element(setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]]),c(random.effects,main.rands.only.inter)))}
else{
if(any(is.element(ind.fixed,i))){
# Check if any of the other main effects contained in the higher order interaction is fixed
approved.interaction.fixed[j] <- prod(is.element(setdiff(strsplit(all.effects[which.contains],":")[[j]],strsplit(all.effects[i],":")[[1]]),fixed.effects))}
# Check if all of the main effects contained in the higher order interaction are random
approved.interaction[j] <- 1-prod(!is.element(strsplit(all.effects[which.contains],":")[[j]],c(random.effects,main.rands.only.inter)))}
}
if(length(which(approved.interaction==1))>0){
approved.interactions[[i]] <- which.contains[which(approved.interaction==1)]}
else{
approved.interactions[[i]] <- FALSE}
library(mixlm)
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
i
approved.interaction
approved.interactions
approved.interaction.fixed
length(which(approved.interaction.fixed==1))>0
i
approved.interactions
approved.interactions.fixed
library(mixlm)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset, restricted=TRUE)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset, unrestricted=TRUE)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset, unrestricted=FALSE)
Anova(mixlm,type="III")
library(mixlm)
data(candies, package="multiblock")
candies1 <- candies
candies1$assessment <- candies1$assessment[,1]
lmm <- lm(assessment~candy*r(assessor), data = candies1)
Anova(lmm, type="III")
options("contrasts")
noRandom <- update(object)
noRandom$random <- NULL
class(noRandom) <- "lm"
fixed.model <- as.data.frame(Anova(noRandom, type='III', singular.ok=TRUE))
fixed.model
options(contrasts = c("contr.treatment", "contr.poly"))
as.data.frame(Anova(noRandom, type='III', singular.ok=TRUE))
as.data.frame(Anova(noRandom, type='II', singular.ok=TRUE))
as.data.frame(nova(noRandom))
as.data.frame(anova(noRandom))

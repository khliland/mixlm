# Add parentheses around random effects
if(!is.null(object$random)){
for(r in object$random$random){
tn[tn==r] <- paste("(", r, ")", sep="")
}
dimnames(M) <- list(tn, tn)
}
list(levels=levs, hasse=M)
}
datv <- data.frame(A = factor(rep(c(1,2),32)),
B = factor(rep(c(1,1,2,2),16)),
Ind = factor(rep(c(1,1,1,1,2,2,2,2),8)))
datv$y = rnorm(64)
modv <- lm(y~A*B + r(Ind), data=datv)
(anv <- Anova(mod, type="II"))
Hv <- hasseMod(modv, fixedTerms=c("Ind"), fixedParents=list(c("A")))
hasse(Hv$hasse, parameters=list(cluster = FALSE, arrows = "none", edgeColor = "darkred"))
modv <- lm(y~A*r(B) + r(Ind), data=datv)
(anv <- Anova(mod, type="II"))
Hv <- hasseMod(modv, fixedTerms=c("Ind"), fixedParents=list(c("A")))
hasse(Hv$hasse, parameters=list(cluster = FALSE, arrows = "none", edgeColor = "darkred"))
hasseMod <- function(object, fixedTerms=NULL, fixedParents=NULL,
meanName="M", errorName="(E)"){
tt <- attr(terms(object),"factors")
terms <- colnames(tt)
tn <- c(meanName, terms, errorName)
M <- matrix(FALSE, length(tn), length(tn))
dimnames(M) <- list(tn, tn)
## Add standard contents
levs <- list()
levs[[1]] <- meanName
levs[[2]] <- character(0)
depth <- 2
## Loop over terms to set right level
for(i in 1:length(terms)){
# Check if special term handling is needed
if(!(terms[i] %in% fixedTerms)){
splat <- strsplit(terms[i], ":")[[1]]
# Add level if needed
if(length(splat) >= depth){
depth <- length(splat)+1
levs[[depth]] <- character(0)
}
# Add term in right level
levs[[depth]] <- c(levs[[depth]], terms[i])
}
}
## Special terms
for(i in 1:length(terms)){
# Check if special term handling is needed
if(terms[i] %in% fixedTerms){
curLev <- 1
for(j in 2:depth){
for(k in 1:length(fixedParents)){
if(fixedParents[k] %in% levs[[j]]){
curLev <- j+1
}
}
}
if(curLev > depth){
depth <- curLev
levs[[depth]] <- character(0)
}
# Add term in right level
levs[[curLev]] <- c(levs[[curLev]], terms[i])
}
}
levs[[depth+1]] <- errorName
## Connect terms
# Mean to main effects
for(i in levs[[2]]){
M[1,i] <- TRUE
}
# Loop over remaining levels
for(i in 3:depth){
for(j in 1:length(levs[[i]])){
splatj <- strsplit(levs[[i]][j], ":")[[1]]
for(k in 1:length(levs[[i-1]])){
splatk <- strsplit(levs[[i-1]][k], ":")[[1]]
if(all(splatk %in% splatj))
M[levs[[i-1]][k], levs[[i]][j]] <- TRUE
}
}
}
# Add special connections
for(i in 1:length(fixedTerms)){
for(j in 1:length(fixedParents[[i]])){
M[fixedParents[[i]][j], fixedTerms[i]] <- TRUE
}
}
# Connect loose ends
for(i in 2:(length(terms)+1)){
if(sum(M[i,])==0)
M[i,errorName] <- TRUE
}
# Add parentheses around random effects
if(!is.null(object$random)){
for(r in object$random$random){
tn[tn==r] <- paste("(", r, ")", sep="")
}
dimnames(M) <- list(tn, tn)
}
list(levels=levs, hasse=M)
}
datt <- data.frame(A = factor(rep(c(1,2),32)),
B = factor(rep(c(1,1,2,2),16)),
C = factor(rep(c(1,1,1,1,2,2,2,2),8)),
D = factor(rep(c(rep(1,8),rep(2,8)),4)),
E = factor(rep(c(rep(1,16),rep(2,16)),2)))
datt$y = rnorm(64)
mod <- lm(y~A*B*C + D + E%in%D, data=datt)
(an <- Anova(mod, type="II"))
H <- hasseMod(mod)
hasse(H$hasse, parameters=list(cluster = FALSE, arrows = "none", edgeColor = "darkred"))
datv <- data.frame(A = factor(rep(c(1,2),32)),
B = factor(rep(c(1,1,2,2),16)),
Ind = factor(rep(c(1,1,1,1,2,2,2,2),8)))
datv$y = rnorm(64)
modv <- lm(y~A*r(B) + r(Ind), data=datv)
(anv <- Anova(mod, type="II"))
Hv <- hasseMod(modv, fixedTerms=c("Ind"), fixedParents=list(c("A")))
hasse(Hv$hasse, parameters=list(cluster = FALSE, arrows = "none", edgeColor = "darkred"))
?dontrun
?notrun
??dontrun
example(hasseMod)
?hasseMod
example(hasseMod)
rm(hasseMod)
example(hasseMod)
hasse(H$hasse, parameters=list(cluster = FALSE, arrows = "none", edgeColor = "darkred"))
hasse(Hv$hasse, parameters=list(cluster = FALSE, arrows = "none", edgeColor = "darkred"))
devtools::check()
newdat <- data.frame(A = factor(rep(c(1,2), each=3*2)), B = factor(rep(c(1,2,3),each=4)), y=rnorm(12))
newdat
newdat <- data.frame(A = factor(rep(c(1,2), 3*2)), B = factor(rep(c(1,2,3),each=4)), y=rnorm(12))
newdat
m <- lm(y ~ A*r(B), data=newdat)
Anova(m, type="II")
m <- lm(y ~ A*r(B), data=newdat, unrestricted = FALSE)
Anova(m, type="II")
m
terms(m)
model.matrix(m)
MM <- model.matrix(m)
attr(MM, "assign")
assign <- attr(MM, "assign")
coef(m)
coef(m)%*%MM
M %*% coef(m)
MM %*% coef(m)
a <- 1
MM[,assign==a] %*% coef(m)[assign=a]
MM[,assign==a] %*% coef(m)[assign==a]
coef(m)
coef(m)[assign==a]
MM[,assign==a,drop=FALSE] %*% coef(m)[assign==a]
ssqa <- sum(MM[,assign==a,drop=FALSE] %*% coef(m)[assign==a]^2)
ssqa
sum((MM[,assign==a,drop=FALSE] %*% coef(m)[assign==a])^2)
ssqa <- sum((MM[,assign==a,drop=FALSE] %*% coef(m)[assign==a])^2)
sample(12)
ssqr <- sum((MM[sample(12),assign==a,drop=FALSE] %*% coef(m)[assign==a])^2)
ssqr
m2 <- lm(y ~ A*r(B)-A, data=newdat, unrestricted = FALSE)
m2
ssqa2 <- sum((MM[,assign==a,drop=FALSE] %*% coef(m2)[assign==a])^2)
datPerm <- newdat
datPerm$y <- fitted(m2) + residuals(m2)[sample(12)]
mPerm <- lm(y ~ A*r(B), data=datPerm, unrestricted = FALSE)
ssqa2 <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
ssqa2
for(i in 1:1000){
datPerm$y <- fitted(m2) + residuals(m2)[sample(12)]
mPerm <- lm(y ~ A*r(B), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
hist(ssqa2)
ssqa
mean(ssqa2)
data(candies)
data(candies, package="multiblock")
data(candies, package="multiblock")
candies$y <- candies$assessment[,1]
m <- lm(y ~ candy*r(assessor), data=newdat, unrestricted = FALSE)
m <- lm(y ~ candy*r(assessor), data=candies, unrestricted = FALSE)
MM <- model.matrix(m)
assign <- attr(MM, "assign")
assign
a <- 1
ssqa <- sum((MM[,assign==a,drop=FALSE] %*% coef(m)[assign==a])^2)
ssqa
m2 <- lm(y ~ candy*r(assessor)-candy, data=candies, unrestricted = FALSE)
Anova(m, type="II")
m2 <- lm(y ~ candy*r(assessor)-candy, data=candies, unrestricted = FALSE)
datPerm <- candies
datPerm$y <- fitted(m2) + residuals(m2)[sample(12)]
datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
for(i in 1:1000){
datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
hist(ssqa2)
ssqa
head(MM)
sum(ssqa2 > ssqa)/1000
mPerm
summary(m)
summary(mPerm)
m2 <- lm(y ~ r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
for(i in 1:1000){
datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
pval <- sum(ssqa2 > ssqa)/1000
pval
hist(ssqa2)
ssqa
Anova(m, type="II")
m3 <- lm(y ~ candy, data=candies, unrestricted = FALSE)
a <- 2
m3 <- lm(y ~ candy, data=candies, unrestricted = FALSE)
datPerm <- candies
for(i in 1:1000){
datPerm$y <- fitted(m3) + residuals(m3)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa3[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
ssqa3 <- ssqa
for(i in 1:1000){
datPerm$y <- fitted(m3) + residuals(m3)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa3[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
pval2 <- sum(ssqa3 > ssqa)/1000
ssqa <- sum((MM[,assign==a,drop=FALSE] %*% coef(m)[assign==a])^2)
pval2 <- sum(ssqa3 > ssqa)/1000
hist(ssqa3)
ssqa
pval2
a <- 3
ssqa <- sum((MM[,assign==a,drop=FALSE] %*% coef(m)[assign==a])^2)
m4 <- lm(y ~ candy+r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
a <- 3
ssqa <- sum((MM[,assign==a,drop=FALSE] %*% coef(m)[assign==a])^2)
m4 <- lm(y ~ candy+r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
ssqa4 <- ssqa
for(i in 1:1000){
datPerm$y <- fitted(m4) + residuals(m4)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa4[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
pval3 <- sum(ssqa4 > ssqa)/1000
hist(ssqa4)
ssqa
Anova(m, type="II")
MM[,assign==3]
model.frame(m)
apply(MM[,assign==3],2,paste0)
apply(MM[,assign==3],2,paste0,collapse="-")
apply(MM[,assign==3],1,paste0,collapse="-")
unique(apply(MM[,assign==3],1,paste0,collapse="-"))
match(levs,unique(levs))
levs <- apply(MM[,assign==3],1,paste0,collapse="-")
match(levs,unique(levs))
segs <- match(levs,ulevs <- unique(levs))
sample(length(ulevs))
segs
lapply(ulevs, function(i)sum(segs==i))
ulevs
lapply(1:length(ulevs), function(i)sum(segs==i))
unlist(lapply(1:length(ulevs), function(i)sum(segs==i)))
all(unlist(lapply(1:length(ulevs), function(i)sum(segs==i))))
numel <- unlist(lapply(1:length(ulevs), function(i)sum(segs==i)))
all(numel==max(numel))
balanced <- all(numel==max(numel))
sample(length(ulevs))
segs
match(segs, sample(length(ulevs)))
match(segs, sample(length(ulevs)))*max(numel)
match(segs, sample(length(ulevs)))*max(numel)-(max(numel)-1)
perm <- numeric(length(segs))
permlev <- sample(max(numel))
permlev
permlev <- sample(length(ulev))
permlev <- sample(length(ulevs))
permlev
lin <- 1:length(segs)
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(i in 1:length(ulevs)){
perm[segs==i] <- lin[segs==permlev[i]]
}
perm
m2 <- lm(y ~ r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(i in 1:length(ulevs)){
perm[segs==i] <- lin[segs==permlev[i]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
pval <- sum(ssqa2 > ssqa)/1000
pval
Anova(m, type="II")
hist(ssqa2)
density(ssqa2)
plot(density(ssqa2))
m2 <- lm(y ~ r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(i in 1:length(ulevs)){
perm[segs==i] <- lin[segs==permlev[i]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
sum(ssqa2 > ssqa)/1000
hist(ssqa2)
ssqa2
max(ssqa2)
m2 <- lm(y ~ r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(i in 1:length(ulevs)){
perm[segs==i] <- lin[segs==permlev[i]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
max(ssqa2)
sort(ssqa2)
ssqa
datPerm <- candies
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(i in 1:length(ulevs)){
perm[segs==i] <- lin[segs==permlev[i]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
}
pval <- sum(ssqa2 > ssqa)/1000
sort(ssqa2)
perm
m2 <- lm(y ~ r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(i in 1:length(ulevs)){
perm[segs==i] <- lin[segs==permlev[i]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
if(ssqa2[i]>3000)
stop()
}
ssqa2[i]
i
perm
residuals(m2)[perm]
m2 <- lm(y ~ r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(i in 1:length(ulevs)){
perm[segs==i] <- lin[segs==permlev[i]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
if(ssqa2[i]>3000)
stop()
}
i
perm
ssqa2 <- ssqa
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(i in 1:length(ulevs)){
perm[segs==i] <- lin[segs==permlev[i]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
if(ssqa2[i]>3000)
stop()
}
i
sort(ssqa2)
m2 <- lm(y ~ r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
ssqa2 <- ssqa
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(j in 1:length(ulevs)){
perm[segs==j] <- lin[segs==permlev[j]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
if(ssqa2[i]>3000)
stop()
}
i
ssqa2
ssqa
m2 <- lm(y ~ r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
ssqa2 <- ssqa
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(j in 1:length(ulevs)){
perm[segs==j] <- lin[segs==permlev[j]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
#  if(ssqa2[i]>3000)
#    stop()
}
sort(ssqa2)
hist(ssqa2)
a <- 1
a <- 1
ssqa <- sum((MM[,assign==a,drop=FALSE] %*% coef(m)[assign==a])^2)
levs <- apply(MM[,assign==3],1,paste0,collapse="-")
segs <- match(levs,ulevs <- unique(levs))
numel <- unlist(lapply(1:length(ulevs), function(i)sum(segs==i)))
balanced <- all(numel==max(numel))
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(i in 1:length(ulevs)){
perm[segs==i] <- lin[segs==permlev[i]]
}
m2 <- lm(y ~ r(assessor), data=candies, unrestricted = FALSE)
datPerm <- candies
ssqa2 <- ssqa
for(i in 1:1000){
permlev <- sample(length(ulevs))
perm <- numeric(length(segs))
lin <- 1:length(segs)
for(j in 1:length(ulevs)){
perm[segs==j] <- lin[segs==permlev[j]]
}
datPerm$y <- fitted(m2) + residuals(m2)[perm]
#  datPerm$y <- fitted(m2) + residuals(m2)[sample(165)]
mPerm <- lm(y ~ candy*r(assessor), data=datPerm, unrestricted = FALSE)
ssqa2[i] <- sum((MM[,assign==a,drop=FALSE] %*% coef(mPerm)[assign==a])^2)
#  if(ssqa2[i]>3000)
#    stop()
}
pval <- sum(ssqa2 > ssqa)/1000
pval
hist(ssqa2)
ssqa
?hasseMod
modv <- lm(y~A*r(B) + r(Ind), data=dat)
(anv <- Anova(mod, type="II"))
Hv <- hasseMod(modv, manualTerms=c("Ind"), manualParents=list(c("A")))
## Not run:  # Requires installation og Rgraphviz
hasse(Hv$hasse, parameters=list(cluster = FALSE, arrows = "none", edgeColor = "darkred"))
devtools::check_win_devel()
devtools::check_win_devel()
?hasse
??hasse
devtools::check()

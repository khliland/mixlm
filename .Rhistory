## Expand model.frame and adapt formula if necessary for missing main effects
eformula <- .extend_formula(formula)
for(i in 1:length(eformula$interactions)){
mf[ncol(mf)+1] <- interaction(mf[strsplit(eformula$interactions[1],":")[[1]]])
}
colnames(mf)[(ncol(mf)-length(eformula$interactions)):ncol(mf)] <- eformula$interactions
mf
anova(lm(y~A+A:B, data=dat))
mf
formula
as.character(formula)
grep(eformula$interactions[[1]],as.character(formula))
gsub(eformula$interactions[[1]],paste0("`",eformula$interactions[[1]],"´"),as.character(formula))
gsub(eformula$interactions[[1]],paste0("`",eformula$interactions[[1]],"`"),as.character(formula))
formula(gsub(eformula$interactions[[1]],paste0("`",eformula$interactions[[1]],"`"),as.character(formula)))
environment(formula)
anova(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat))
mt
terms(formula)
anova(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat))
contrasts
M <- "A"
contrasts[as.name(M)]
contrasts[M]
kronecker(contrasts[1:2])
?kronecker
do.call(kronecker, contrasts)
do.call(contrasts,kronecker)
do.call(kronecker, as.list(contrasts))
?do.call
kronecker(matrix(1:4,2),matrix(1:4,2))
matrix(1:4,2) %o% matrix(1:4,2)
.krons <- function(x){
k <- kronecker(x[[1]], x[[2]])
for (i in 3:length(x))
k <- kronecker(k, x[[i]])
return(k)
}
.krons(contrasts)
length(contrasts)
class(contrasts)
.krons <- function(x){
if (length(x) == 1)
return(x[[1]])
k <- kronecker(x[[1]], x[[2]])
if (length(x) == 2)
return(k)
for (i in 3:length(x))
k <- kronecker(k, x[[i]])
return(k)
}
.krons(contrasts)
eformula
names(contrasts)
strsplit(eformula$interactions[[1]],":")
strsplit(eformula$interactions[[1]],":")[[1]]
contrasts[strsplit(eformula$interactions[[1]],":")[[1]]]
.krons(contrasts[strsplit(eformula$interactions[[1]],":")[[1]]])
i<-1
contrasts[length(contrasts)+1] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
contrasts[length(contrasts) + 1]
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
contrasts
names(contrasts)(length(contrasts)) <- eformula$interactions[[i]]
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
contrasts
formula
anova(lm(y~A+A:B, data=dat))
for(i in 1:length(eformula$interactions)){
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
}
contrast
contrasts
eval(mf, parent.frame())
mf
anova(lm(y~A+A:B, data=dat))
for(i in 1:length(eformula$interactions)){
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
}
contrasts
eformula$missing
setdiff(names(contrasts), eformula$missing)
anova(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat))
anova(lm(y~A+A:B, data=dat, equal_baseline=TRUE))
# Full contrasts
contr.full <- function(n){
diag(rep(1,n))
}
contr.full(10)
contr.sum(3)
contr.sum
anova(lm(y~A+A:B, data=dat, equal_baseline=TRUE))
model.matrix(lm(y~A+A:B, data=dat, equal_baseline=TRUE))
dat
Test equal_baseline med mer enn to nivåer i faktorene!
dat3 <- data.frame(y=rnorm(24),A=factor(c(rep(1,8),rep(2,8),rep(3,8))), B=factor(rep(c(1,2),12)), C=factor(rep(c(1,1,2,2),6)))
model.matrix(lm(y~A+A:B, data=dat3))#, equal_baseline=TRUE))
model.matrix(lm(y~A+A:B, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3))#, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3, equal_baseline=TRUE))
dat3
contrasts(dat3)
contrasts(dat3$A)
contrasts(dat3$B)
contrasts(dat3$C)
contrasts(dat3$A) <- contr.full(3)
stats::lm(y~A*B, data=dat3)
contrasts(dat3$A)
contr.full(3)
?contrasts
options(contrasts)
options("contrasts")
options(contrasts = list("contr.full","contr.poly"))
options(contrasts = list("contr.treatment","contr.poly"))
options(contrasts = list(unordered="contr.treatment",ordered="contr.poly"))
contrasts(dat3$A) <- contr.sum(3)
contrasts(dat3$A)
contrasts(dat3$A) <- contr.full(3)
contrasts(dat3$A)
stats::lm(y~A*B, data=dat3)
contrasts(dat3$A) <- contr.treatment(3)
stats::lm(y~A*B, data=dat3)
stats::model.frame(stats::lm(y~A*B, data=dat3))
stats::model.matrix(stats::lm(y~A*B, data=dat3))
contrasts(dat3$A) <- contr.full(3)
stats::model.matrix(stats::lm(y~A*B, data=dat3))
contrasts(dat3$A) <- "contr.full"
stats::model.matrix(stats::lm(y~A*B, data=dat3))
contr.treatment
# Full contrasts
contr.full <- function (n, base = NULL, contrasts = TRUE, sparse = FALSE){
if (is.numeric(n) && length(n) == 1L) {
if (n > 1L)
levels <- as.character(seq_len(n))
else stop("not enough degrees of freedom to define contrasts")
}
else {
levels <- as.character(n)
n <- length(n)
}
contr <- .Diag(levels, sparse = sparse)
if (contrasts) {
if (n < 2L)
stop(gettextf("contrasts not defined for %d degrees of freedom",
n - 1L), domain = NA)
#    if (base < 1L || base > n)
#      stop("baseline group number out of range")
#    contr <- contr[, -base, drop = FALSE]
}
contr
}
stats::model.matrix(stats::lm(y~A*B, data=dat3))
stats:::.Diag
# Function copied from package stats
.Diag <- function (nms, sparse){
n <- as.integer(length(nms))
d <- c(n, n)
dn <- list(nms, nms)
if (sparse) {
if (!suppressPackageStartupMessages(requireNamespace("Matrix")))
stop(gettextf("%s needs package 'Matrix' correctly installed",
"contr*(.., sparse=TRUE)"), domain = NA)
methods::new("ddiMatrix", diag = "U", Dim = d, Dimnames = dn)
}
else array(c(rep.int(c(1, numeric(n)), n - 1L), 1), d, dn)
}
stats::model.matrix(stats::lm(y~A*B, data=dat3))
stats::anova(stats::lm(y~A*B, data=dat3))
stats::lm(y~A*B, data=dat3)
stats::lm(y~A+B, data=dat3)
stats::lm(y~A, data=dat3)
contr.full(3)
contr.full(3, FALSE)
contr.full(3, TRUE)
contr.full(3, TRUE, TRUE)
contr.full(3, TRUE, FALSE)
contr.full(3, TRUE, FALSE, TRUE)
contr.full(3, TRUE, FALSE, FALSE)
contr.full(3, TRUE, TRUE, FALSE)
model.matrix(stats::lm(y~A, data=dat3))
qr(model.matrix(stats::lm(y~A, data=dat3)))
qr_decomposition <- qr(model.matrix(stats::lm(y~A, data=dat3)))
# Extract Q and R
Q <- qr.Q(qr_decomposition)
R <- qr.R(qr_decomposition)
# Solve for coefficients (beta) using back-substitution
beta <- solve(R, t(Q) %*% y)
dim(Q)
dim(y)
dim(R)
dim(solve(R, t(Q))
)
R
rm(contr.full)
rm(create_crossed_interaction_matrix())
rm(create_crossed_interaction_matrix
)
rm(extend_formula())
rm(extend_formula)
devtools::check()
devtools::check()
?anova_reg
anova_reg(lm(y~x, data=data.frame(y=1:4,x=rnorm(4))))
lm(y~x, data=data.frame(y=1:4,x=rnorm(4)))
traceback()
?factor
model.matrix
model.matrix.default
lm(y~x, data=data.frame(y=1:4,x=rnorm(4)))
lm(y~x, data=data.frame(y=1:4,x=rnorm(4)))
contrasts
mf
attributes(mf)
lm(y~x, data=data.frame(y=1:4,x=rnorm(4)))
dat3c <- data.frame(y=rnorm(24),A=c(rep(1,8),rep(2,8),rep(3,8)), B=rep(c(1,2),12), C=rep(c(1,1,2,2),6))
anova(lm(y~A+A:B, data=dat3, equal_baseline=TRUE))
eformula
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
eformula
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
eformula
inherits(mf$"A", "formula")
lapply(mf[eformula$variables],inherits)
lapply(mf[eformula$variables], inherits, what="factor")
unlist(lapply(mf[eformula$variables], inherits, what="factor"))
!all(unlist(lapply(mf[eformula$variables], inherits, what="factor")))
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3c, equal_baseline=TRUE))
anova(lm(y~A+A:B, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B+C, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
eformula
length(eformula$interactions)
# Expand mf
for(i in 1:length(eformula$interactions)){
mf[ncol(mf)+1] <- interaction(mf[strsplit(eformula$interactions[1],":")[[1]]])
}
head(mf)
colnames(mf)[(ncol(mf)-length(eformula$interactions)+1):ncol(mf)]
colnames(mf)[(ncol(mf)-length(eformula$interactions)+1):ncol(mf)] <- eformula$interactions
colnames(mf)
# Adapt formula
for(i in 1:length(eformula$interactions)){
formula <- formula(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)))
}
formula
mt <- terms(formula)
mt
for(i in 1:length(eformula$interactions)){
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
}
contrasts
dat3
anova(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
model.frame(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
anova(lm(y~A+A:B+A:C, data=dat3, equal_baseline=TRUE))
devtools::check()
devtools::check_win_devel()
?stats::lm
?stats::lm.fit
?stats::lm.wfit
?mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
contrasts
expand.dots()
...
x
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment")
x
mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.sum")
mixlm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.sum")
x
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.sum")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.sum"))
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.sum"))
mixlm
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment"))
mixlm
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment.last"))
?contr.treatment
contr.treatment(2,1)
contr.treatment(2,2)
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.sum"))
csum
contrasts[[cur[j]]][1]
contrasts[[cur[j]]]
contrasts
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.sum"))
mixlm
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment"))
mixlm
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment.last"))
mixlm
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment.last"))
csum
contrasts
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment.last"))
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment.last"))
csum
contrasts
mixlm
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment.last"))
mixlm
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.treatment"))
mixlm
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts="contr.sum"))
mixlm
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts=list(x="contr.sum",z="contr.treatment")))
mixlm
Anova(mixlm,type="II")
devtools::check()
model.matrix(mixlm <- lm(y~x*r(z), data = dataset, contrasts=list(x="contr.sum",z="contr.treatment.last")))
mixlm
model.matrix(mixlm)
library(HDANOVA)
data(candies)
mod <- asca(assessment ~ candy + assessor, data=candies, contrasts="contr.treatment")
mod$models$transparent$contrasts
mod <- asca(assessment ~ candy + assessor, data=candies, contrasts="contr.treatment")
contrasts
contrasts.orig
mfPre
detach("package:HDANOVA", unload = TRUE)
library(HDANOVA)
mod <- asca(assessment ~ candy + assessor, data=candies, contrasts="contr.treatment")
contrasts
devtools::check_win_devel()
?best.subsets
?Rcmdr
?lm
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*r(z), data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x*z, data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x+x:z, data = dataset)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE)
Anova(mixlm,type="III")
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE)
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
eformula
!is.null(eformula$interactions)
all(unlist(lapply(mf[eformula$variables], inherits, what="factor")))
i <- 1
interaction(mf[strsplit(eformula$interactions[i],":")[[1]]])
# Expand mf
for(i in 1:length(eformula$interactions)){
mf[ncol(mf)+1] <- interaction(mf[strsplit(eformula$interactions[i],":")[[1]]])
}
colnames(mf)[(ncol(mf)-length(eformula$interactions)+1):ncol(mf)] <- eformula$interactions
mf
# Adapt formula
for(i in 1:length(eformula$interactions)){
formula <- formula(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)))
}
formula
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
i <- 1
formula(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)))
as.character(formula)
formula
gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula))
paste(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)), collapse=" ")
paste(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula))[c(2,1,3)], collapse=" ")
?stats:::as.character.formula
formula(paste(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula))[c(2,1,3)], collapse=" "))
#        formula <- formula(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula)))
formula <- formula(paste(gsub(eformula$interactions[[i]], paste0("`",eformula$interactions[[i]],"`"),as.character(formula))[c(2,1,3)], collapse=" "))
mt <- terms(formula)
mt
i
contrasts[[length(contrasts)+1]] <- .krons(contrasts[strsplit(eformula$interactions[[i]],":")[[1]]])
names(contrasts)[length(contrasts)] <- eformula$interactions[[i]]
contrasts <- contrasts[setdiff(names(contrasts), eformula$missing)]
contrasts
dataset   <- data.frame(y=rnorm(8), x=factor(c(rep(1,4),rep(0,4))), z=factor(rep(c(1,0),4)))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
Anova(mixlm, type="II")
stats:::model.frame.lm
model.matrix(mixlm <- lm(y~x+z+x:z, data = dataset, equal_baseline=TRUE))
model.matrix(mixlm <- lm(y~x+z+x:z, data = dataset, equal_baseline=TRUE))
eformula$interactions
model.matrix(mixlm <- lm(y~x+z+x:z, data = dataset, equal_baseline=TRUE))
model.matrix(mixlm <- lm(y~x+z+x:z, data = dataset, equal_baseline=TRUE))
model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
anova(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE))
crossprod(model.matrix(mixlm <- lm(y~x+x:z, data = dataset, equal_baseline=TRUE)))
anova(lm(y ~ x + x:z), data = dataset))
anova(lm(y ~ x + x:z, data = dataset))
anova(lm(y ~ x + x:z, data = dataset, equal_baseline=TRUE))
?lm
Anova(lm(y ~ x + x:z, data = dataset, equal_baseline=TRUE), type="II")
Anova(lm(y ~ x + x:z, data = dataset, equal_baseline=TRUE), type="III")
data(candies, package = "HDANOVA")
candies$assessment1 <- candies$assessment[,5]
anova(lm(assessment1 ~ candy + assessor:candy, data=candies, equal_baseline=TRUE))
anova(lm(assessment1 ~ candy + candy:assessor, data=candies, equal_baseline=TRUE))
anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE),type="II")
gsub(":","x","a:b")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE),type="II")
lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE)
lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE)
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
mt
mf
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
mt
mf
contrasts.names
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
contrasts.names
contrasts
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
contrasts.names
names(contrasts)[length(contrasts)]
contrasts.names[[gsub(":","x",eformula$interactions[[i]])]]
contrasts.names[[gsub(":","x",eformula$interactions[[i]])]] <- contrasts.names[[strsplit(eformula$interactions[[i]],":")[[1]]]]]
contrasts.names[[gsub(":","x",eformula$interactions[[i]])]] <- contrasts.names[[strsplit(eformula$interactions[[i]],":")[[1]]]]
contrasts.names[[strsplit(eformula$interactions[[i]],":")[[1]]]]
strsplit(eformula$interactions[[i]],":")
strsplit(eformula$interactions[[i]],":")
strsplit(eformula$interactions[[i]],":")[[1]]
strsplit(eformula$interactions[[i]],":")[[1]][1]
contrasts.names[[gsub(":","x",eformula$interactions[[i]])]] <- contrasts.names[[strsplit(eformula$interactions[[i]],":")[[1]][1]]]
contrasts.names
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
contrasts.names
model.frame(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
Aanova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="II")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="II")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
model.matrix(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
model.matrix(lm(assessment1 ~ assessor + candy + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
model.matrix(lm(assessment1 ~ assessor + candy + assessor:candy, data=candies))
mmx <- model.matrix(lm(assessment1 ~ assessor + candy + assessor:candy, data=candies))
mm <- model.matrix(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
mmx[,51]
mm[,55]
mm[,51]
mmx[,55]
colnames(mm)
colnames(mmx)
mm[,12:51]
rowSums(mm[,12:51])
rowSums(mmx[,16:55])
mixlm:::.krons(contr.sum(5),contr.sum(11))
mixlm:::.krons(list(contr.sum(5),contr.sum(11)))
rowSums(mixlm:::.krons(list(contr.sum(5),contr.sum(11))))
rowSums(mixlm:::.krons(list(contr.sum(11),contr.sum(5))))
extended.model.frame(mod <- asca(assessment1 ~ assessor*candy, data=candies))
extended.model.frame(mod <- asca(assessment1 ~ assessor*candy, data=candies))
extended.model.frame(assessment1 ~ assessor*candy, data=candies)
model.matrix(extended.model.frame(assessment1 ~ assessor*candy, data=candies))
model.matrix(lm(assessment1 ~ assessor*candy, data=candies))
anova(lm(assessment1 ~ assessor*candy, data=candies))
Anova(lm(assessment1 ~ assessor*candy, data=candies), type="II")
lm(assessment1 ~ assessor*candy, data=candies)$coefs
coefficients(lm(assessment1 ~ assessor*candy, data=candies))
model.matrix(lm(assessment1 ~ assessor*candy, data=candies))
model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(11:14)]
colnames(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(11:14)])
colnames(model.matrix(lm(assessment1 ~ assessor*candy, data=candies)))
colnames(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)])
solve(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)], candies$assessment1)
solve(crossprod(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)]), candies$assessment1)
solve(tcrossprod(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)]), candies$assessment1)
dutt <- data.frame(M = I(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)]), candies$assessment1)
dutt <- data.frame(M = I(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(12:15)]), ass = candies$assessment1)
lm(ass~M, data=dutt)
anova(lm(ass~M, data=dutt))
dutt <- data.frame(M1 = I(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,2:11]), M2 = I(model.matrix(lm(assessment1 ~ assessor*candy, data=candies))[,-(1:15)]), ass = candies$assessment1)
anova(lm(ass~M1+M2, data=dutt))
anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
Anova(lm(ass~M1+M2, data=dutt), type="II")
Anova(lm(ass~M1+M2, data=dutt), type="III")
head(dutt)
anova(lm(assessment1 ~ assessor*candy, data=candies))
Anova(lm(assessment1 ~ assessor*candy, data=candies), type="II")
Anova(lm(ass~M1+M2, data=dutt), type="III")
anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE))
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="II")
Anova(lm(assessment1 ~ assessor + assessor:candy, data=candies, equal_baseline=TRUE), type="III")
